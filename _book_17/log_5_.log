Files already downloaded and verified
Files already downloaded and verified
---model.fc.in_features--
 512
---type(model.fc---- <class 'torch.nn.modules.linear.Linear'>
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
ResNet                                   --                        --
├─Conv2d: 1-1                            [10, 64, 14, 14]          (9,408)
├─BatchNorm2d: 1-2                       [10, 64, 14, 14]          (128)
├─ReLU: 1-3                              [10, 64, 14, 14]          --
├─MaxPool2d: 1-4                         [10, 64, 7, 7]            --
├─Sequential: 1-5                        [10, 64, 7, 7]            --
│    └─BasicBlock: 2-1                   [10, 64, 7, 7]            --
│    │    └─Conv2d: 3-1                  [10, 64, 7, 7]            (36,864)
│    │    └─BatchNorm2d: 3-2             [10, 64, 7, 7]            (128)
│    │    └─ReLU: 3-3                    [10, 64, 7, 7]            --
│    │    └─Conv2d: 3-4                  [10, 64, 7, 7]            (36,864)
│    │    └─BatchNorm2d: 3-5             [10, 64, 7, 7]            (128)
│    │    └─ReLU: 3-6                    [10, 64, 7, 7]            --
│    └─BasicBlock: 2-2                   [10, 64, 7, 7]            --
│    │    └─Conv2d: 3-7                  [10, 64, 7, 7]            (36,864)
│    │    └─BatchNorm2d: 3-8             [10, 64, 7, 7]            (128)
│    │    └─ReLU: 3-9                    [10, 64, 7, 7]            --
│    │    └─Conv2d: 3-10                 [10, 64, 7, 7]            (36,864)
│    │    └─BatchNorm2d: 3-11            [10, 64, 7, 7]            (128)
│    │    └─ReLU: 3-12                   [10, 64, 7, 7]            --
├─Sequential: 1-6                        [10, 128, 4, 4]           --
│    └─BasicBlock: 2-3                   [10, 128, 4, 4]           --
│    │    └─Conv2d: 3-13                 [10, 128, 4, 4]           (73,728)
│    │    └─BatchNorm2d: 3-14            [10, 128, 4, 4]           (256)
│    │    └─ReLU: 3-15                   [10, 128, 4, 4]           --
│    │    └─Conv2d: 3-16                 [10, 128, 4, 4]           (147,456)
│    │    └─BatchNorm2d: 3-17            [10, 128, 4, 4]           (256)
│    │    └─Sequential: 3-18             [10, 128, 4, 4]           (8,448)
│    │    └─ReLU: 3-19                   [10, 128, 4, 4]           --
│    └─BasicBlock: 2-4                   [10, 128, 4, 4]           --
│    │    └─Conv2d: 3-20                 [10, 128, 4, 4]           (147,456)
│    │    └─BatchNorm2d: 3-21            [10, 128, 4, 4]           (256)
│    │    └─ReLU: 3-22                   [10, 128, 4, 4]           --
│    │    └─Conv2d: 3-23                 [10, 128, 4, 4]           (147,456)
│    │    └─BatchNorm2d: 3-24            [10, 128, 4, 4]           (256)
│    │    └─ReLU: 3-25                   [10, 128, 4, 4]           --
├─Sequential: 1-7                        [10, 256, 2, 2]           --
│    └─BasicBlock: 2-5                   [10, 256, 2, 2]           --
│    │    └─Conv2d: 3-26                 [10, 256, 2, 2]           (294,912)
│    │    └─BatchNorm2d: 3-27            [10, 256, 2, 2]           (512)
│    │    └─ReLU: 3-28                   [10, 256, 2, 2]           --
│    │    └─Conv2d: 3-29                 [10, 256, 2, 2]           (589,824)
│    │    └─BatchNorm2d: 3-30            [10, 256, 2, 2]           (512)
│    │    └─Sequential: 3-31             [10, 256, 2, 2]           (33,280)
│    │    └─ReLU: 3-32                   [10, 256, 2, 2]           --
│    └─BasicBlock: 2-6                   [10, 256, 2, 2]           --
│    │    └─Conv2d: 3-33                 [10, 256, 2, 2]           (589,824)
│    │    └─BatchNorm2d: 3-34            [10, 256, 2, 2]           (512)
│    │    └─ReLU: 3-35                   [10, 256, 2, 2]           --
│    │    └─Conv2d: 3-36                 [10, 256, 2, 2]           (589,824)
│    │    └─BatchNorm2d: 3-37            [10, 256, 2, 2]           (512)
│    │    └─ReLU: 3-38                   [10, 256, 2, 2]           --
├─Sequential: 1-8                        [10, 512, 1, 1]           --
│    └─BasicBlock: 2-7                   [10, 512, 1, 1]           --
│    │    └─Conv2d: 3-39                 [10, 512, 1, 1]           (1,179,648)
│    │    └─BatchNorm2d: 3-40            [10, 512, 1, 1]           (1,024)
│    │    └─ReLU: 3-41                   [10, 512, 1, 1]           --
│    │    └─Conv2d: 3-42                 [10, 512, 1, 1]           (2,359,296)
│    │    └─BatchNorm2d: 3-43            [10, 512, 1, 1]           (1,024)
│    │    └─Sequential: 3-44             [10, 512, 1, 1]           (132,096)
│    │    └─ReLU: 3-45                   [10, 512, 1, 1]           --
│    └─BasicBlock: 2-8                   [10, 512, 1, 1]           --
│    │    └─Conv2d: 3-46                 [10, 512, 1, 1]           (2,359,296)
│    │    └─BatchNorm2d: 3-47            [10, 512, 1, 1]           (1,024)
│    │    └─ReLU: 3-48                   [10, 512, 1, 1]           --
│    │    └─Conv2d: 3-49                 [10, 512, 1, 1]           (2,359,296)
│    │    └─BatchNorm2d: 3-50            [10, 512, 1, 1]           (1,024)
│    │    └─ReLU: 3-51                   [10, 512, 1, 1]           --
├─AdaptiveAvgPool2d: 1-9                 [10, 512, 1, 1]           --
├─Linear: 1-10                           [10, 10]                  5,130
==========================================================================================
Total params: 11,181,642
Trainable params: 5,130
Non-trainable params: 11,176,512
Total mult-adds (M): 342.50
==========================================================================================
Input size (MB): 0.09
Forward/backward pass size (MB): 6.88
Params size (MB): 44.73
Estimated Total Size (MB): 51.70
==========================================================================================
------summary(model, input_size=(test_model_batch_size, 1, 28, 28)---- ==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
ResNet                                   --                        --
├─Conv2d: 1-1                            [10, 64, 14, 14]          (9,408)
├─BatchNorm2d: 1-2                       [10, 64, 14, 14]          (128)
├─ReLU: 1-3                              [10, 64, 14, 14]          --
├─MaxPool2d: 1-4                         [10, 64, 7, 7]            --
├─Sequential: 1-5                        [10, 64, 7, 7]            --
│    └─BasicBlock: 2-1                   [10, 64, 7, 7]            --
│    │    └─Conv2d: 3-1                  [10, 64, 7, 7]            (36,864)
│    │    └─BatchNorm2d: 3-2             [10, 64, 7, 7]            (128)
│    │    └─ReLU: 3-3                    [10, 64, 7, 7]            --
│    │    └─Conv2d: 3-4                  [10, 64, 7, 7]            (36,864)
│    │    └─BatchNorm2d: 3-5             [10, 64, 7, 7]            (128)
│    │    └─ReLU: 3-6                    [10, 64, 7, 7]            --
│    └─BasicBlock: 2-2                   [10, 64, 7, 7]            --
│    │    └─Conv2d: 3-7                  [10, 64, 7, 7]            (36,864)
│    │    └─BatchNorm2d: 3-8             [10, 64, 7, 7]            (128)
│    │    └─ReLU: 3-9                    [10, 64, 7, 7]            --
│    │    └─Conv2d: 3-10                 [10, 64, 7, 7]            (36,864)
│    │    └─BatchNorm2d: 3-11            [10, 64, 7, 7]            (128)
│    │    └─ReLU: 3-12                   [10, 64, 7, 7]            --
├─Sequential: 1-6                        [10, 128, 4, 4]           --
│    └─BasicBlock: 2-3                   [10, 128, 4, 4]           --
│    │    └─Conv2d: 3-13                 [10, 128, 4, 4]           (73,728)
│    │    └─BatchNorm2d: 3-14            [10, 128, 4, 4]           (256)
│    │    └─ReLU: 3-15                   [10, 128, 4, 4]           --
│    │    └─Conv2d: 3-16                 [10, 128, 4, 4]           (147,456)
│    │    └─BatchNorm2d: 3-17            [10, 128, 4, 4]           (256)
│    │    └─Sequential: 3-18             [10, 128, 4, 4]           (8,448)
│    │    └─ReLU: 3-19                   [10, 128, 4, 4]           --
│    └─BasicBlock: 2-4                   [10, 128, 4, 4]           --
│    │    └─Conv2d: 3-20                 [10, 128, 4, 4]           (147,456)
│    │    └─BatchNorm2d: 3-21            [10, 128, 4, 4]           (256)
│    │    └─ReLU: 3-22                   [10, 128, 4, 4]           --
│    │    └─Conv2d: 3-23                 [10, 128, 4, 4]           (147,456)
│    │    └─BatchNorm2d: 3-24            [10, 128, 4, 4]           (256)
│    │    └─ReLU: 3-25                   [10, 128, 4, 4]           --
├─Sequential: 1-7                        [10, 256, 2, 2]           --
│    └─BasicBlock: 2-5                   [10, 256, 2, 2]           --
│    │    └─Conv2d: 3-26                 [10, 256, 2, 2]           (294,912)
│    │    └─BatchNorm2d: 3-27            [10, 256, 2, 2]           (512)
│    │    └─ReLU: 3-28                   [10, 256, 2, 2]           --
│    │    └─Conv2d: 3-29                 [10, 256, 2, 2]           (589,824)
│    │    └─BatchNorm2d: 3-30            [10, 256, 2, 2]           (512)
│    │    └─Sequential: 3-31             [10, 256, 2, 2]           (33,280)
│    │    └─ReLU: 3-32                   [10, 256, 2, 2]           --
│    └─BasicBlock: 2-6                   [10, 256, 2, 2]           --
│    │    └─Conv2d: 3-33                 [10, 256, 2, 2]           (589,824)
│    │    └─BatchNorm2d: 3-34            [10, 256, 2, 2]           (512)
│    │    └─ReLU: 3-35                   [10, 256, 2, 2]           --
│    │    └─Conv2d: 3-36                 [10, 256, 2, 2]           (589,824)
│    │    └─BatchNorm2d: 3-37            [10, 256, 2, 2]           (512)
│    │    └─ReLU: 3-38                   [10, 256, 2, 2]           --
├─Sequential: 1-8                        [10, 512, 1, 1]           --
│    └─BasicBlock: 2-7                   [10, 512, 1, 1]           --
│    │    └─Conv2d: 3-39                 [10, 512, 1, 1]           (1,179,648)
│    │    └─BatchNorm2d: 3-40            [10, 512, 1, 1]           (1,024)
│    │    └─ReLU: 3-41                   [10, 512, 1, 1]           --
│    │    └─Conv2d: 3-42                 [10, 512, 1, 1]           (2,359,296)
│    │    └─BatchNorm2d: 3-43            [10, 512, 1, 1]           (1,024)
│    │    └─Sequential: 3-44             [10, 512, 1, 1]           (132,096)
│    │    └─ReLU: 3-45                   [10, 512, 1, 1]           --
│    └─BasicBlock: 2-8                   [10, 512, 1, 1]           --
│    │    └─Conv2d: 3-46                 [10, 512, 1, 1]           (2,359,296)
│    │    └─BatchNorm2d: 3-47            [10, 512, 1, 1]           (1,024)
│    │    └─ReLU: 3-48                   [10, 512, 1, 1]           --
│    │    └─Conv2d: 3-49                 [10, 512, 1, 1]           (2,359,296)
│    │    └─BatchNorm2d: 3-50            [10, 512, 1, 1]           (1,024)
│    │    └─ReLU: 3-51                   [10, 512, 1, 1]           --
├─AdaptiveAvgPool2d: 1-9                 [10, 512, 1, 1]           --
├─Linear: 1-10                           [10, 10]                  5,130
==========================================================================================
Total params: 11,181,642
Trainable params: 5,130
Non-trainable params: 11,176,512
Total mult-adds (M): 342.50
==========================================================================================
Input size (MB): 0.09
Forward/backward pass size (MB): 6.88
Params size (MB): 44.73
Estimated Total Size (MB): 51.70
==========================================================================================
=================================================================
Layer (type:depth-idx)                   Param #
=================================================================
ResNet                                   --
├─Conv2d: 1-1                            (9,408)
├─BatchNorm2d: 1-2                       (128)
├─ReLU: 1-3                              --
├─MaxPool2d: 1-4                         --
├─Sequential: 1-5                        --
│    └─BasicBlock: 2-1                   --
│    │    └─Conv2d: 3-1                  (36,864)
│    │    └─BatchNorm2d: 3-2             (128)
│    │    └─ReLU: 3-3                    --
│    │    └─Conv2d: 3-4                  (36,864)
│    │    └─BatchNorm2d: 3-5             (128)
│    └─BasicBlock: 2-2                   --
│    │    └─Conv2d: 3-6                  (36,864)
│    │    └─BatchNorm2d: 3-7             (128)
│    │    └─ReLU: 3-8                    --
│    │    └─Conv2d: 3-9                  (36,864)
│    │    └─BatchNorm2d: 3-10            (128)
├─Sequential: 1-6                        --
│    └─BasicBlock: 2-3                   --
│    │    └─Conv2d: 3-11                 (73,728)
│    │    └─BatchNorm2d: 3-12            (256)
│    │    └─ReLU: 3-13                   --
│    │    └─Conv2d: 3-14                 (147,456)
│    │    └─BatchNorm2d: 3-15            (256)
│    │    └─Sequential: 3-16             (8,448)
│    └─BasicBlock: 2-4                   --
│    │    └─Conv2d: 3-17                 (147,456)
│    │    └─BatchNorm2d: 3-18            (256)
│    │    └─ReLU: 3-19                   --
│    │    └─Conv2d: 3-20                 (147,456)
│    │    └─BatchNorm2d: 3-21            (256)
├─Sequential: 1-7                        --
│    └─BasicBlock: 2-5                   --
│    │    └─Conv2d: 3-22                 (294,912)
│    │    └─BatchNorm2d: 3-23            (512)
│    │    └─ReLU: 3-24                   --
│    │    └─Conv2d: 3-25                 (589,824)
│    │    └─BatchNorm2d: 3-26            (512)
│    │    └─Sequential: 3-27             (33,280)
│    └─BasicBlock: 2-6                   --
│    │    └─Conv2d: 3-28                 (589,824)
│    │    └─BatchNorm2d: 3-29            (512)
│    │    └─ReLU: 3-30                   --
│    │    └─Conv2d: 3-31                 (589,824)
│    │    └─BatchNorm2d: 3-32            (512)
├─Sequential: 1-8                        --
│    └─BasicBlock: 2-7                   --
│    │    └─Conv2d: 3-33                 (1,179,648)
│    │    └─BatchNorm2d: 3-34            (1,024)
│    │    └─ReLU: 3-35                   --
│    │    └─Conv2d: 3-36                 (2,359,296)
│    │    └─BatchNorm2d: 3-37            (1,024)
│    │    └─Sequential: 3-38             (132,096)
│    └─BasicBlock: 2-8                   --
│    │    └─Conv2d: 3-39                 (2,359,296)
│    │    └─BatchNorm2d: 3-40            (1,024)
│    │    └─ReLU: 3-41                   --
│    │    └─Conv2d: 3-42                 (2,359,296)
│    │    └─BatchNorm2d: 3-43            (1,024)
├─AdaptiveAvgPool2d: 1-9                 --
├─Linear: 1-10                           5,130
=================================================================
Total params: 11,181,642
Trainable params: 5,130
Non-trainable params: 11,176,512
=================================================================
------summary(model)----- =================================================================
Layer (type:depth-idx)                   Param #
=================================================================
ResNet                                   --
├─Conv2d: 1-1                            (9,408)
├─BatchNorm2d: 1-2                       (128)
├─ReLU: 1-3                              --
├─MaxPool2d: 1-4                         --
├─Sequential: 1-5                        --
│    └─BasicBlock: 2-1                   --
│    │    └─Conv2d: 3-1                  (36,864)
│    │    └─BatchNorm2d: 3-2             (128)
│    │    └─ReLU: 3-3                    --
│    │    └─Conv2d: 3-4                  (36,864)
│    │    └─BatchNorm2d: 3-5             (128)
│    └─BasicBlock: 2-2                   --
│    │    └─Conv2d: 3-6                  (36,864)
│    │    └─BatchNorm2d: 3-7             (128)
│    │    └─ReLU: 3-8                    --
│    │    └─Conv2d: 3-9                  (36,864)
│    │    └─BatchNorm2d: 3-10            (128)
├─Sequential: 1-6                        --
│    └─BasicBlock: 2-3                   --
│    │    └─Conv2d: 3-11                 (73,728)
│    │    └─BatchNorm2d: 3-12            (256)
│    │    └─ReLU: 3-13                   --
│    │    └─Conv2d: 3-14                 (147,456)
│    │    └─BatchNorm2d: 3-15            (256)
│    │    └─Sequential: 3-16             (8,448)
│    └─BasicBlock: 2-4                   --
│    │    └─Conv2d: 3-17                 (147,456)
│    │    └─BatchNorm2d: 3-18            (256)
│    │    └─ReLU: 3-19                   --
│    │    └─Conv2d: 3-20                 (147,456)
│    │    └─BatchNorm2d: 3-21            (256)
├─Sequential: 1-7                        --
│    └─BasicBlock: 2-5                   --
│    │    └─Conv2d: 3-22                 (294,912)
│    │    └─BatchNorm2d: 3-23            (512)
│    │    └─ReLU: 3-24                   --
│    │    └─Conv2d: 3-25                 (589,824)
│    │    └─BatchNorm2d: 3-26            (512)
│    │    └─Sequential: 3-27             (33,280)
│    └─BasicBlock: 2-6                   --
│    │    └─Conv2d: 3-28                 (589,824)
│    │    └─BatchNorm2d: 3-29            (512)
│    │    └─ReLU: 3-30                   --
│    │    └─Conv2d: 3-31                 (589,824)
│    │    └─BatchNorm2d: 3-32            (512)
├─Sequential: 1-8                        --
│    └─BasicBlock: 2-7                   --
│    │    └─Conv2d: 3-33                 (1,179,648)
│    │    └─BatchNorm2d: 3-34            (1,024)
│    │    └─ReLU: 3-35                   --
│    │    └─Conv2d: 3-36                 (2,359,296)
│    │    └─BatchNorm2d: 3-37            (1,024)
│    │    └─Sequential: 3-38             (132,096)
│    └─BasicBlock: 2-8                   --
│    │    └─Conv2d: 3-39                 (2,359,296)
│    │    └─BatchNorm2d: 3-40            (1,024)
│    │    └─ReLU: 3-41                   --
│    │    └─Conv2d: 3-42                 (2,359,296)
│    │    └─BatchNorm2d: 3-43            (1,024)
├─AdaptiveAvgPool2d: 1-9                 --
├─Linear: 1-10                           5,130
=================================================================
Total params: 11,181,642
Trainable params: 5,130
Non-trainable params: 11,176,512
=================================================================
------model---- ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): BasicBlock(
      (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer2): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer3): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (layer4): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=512, out_features=10, bias=True)
)
Epoch 1/1
----in_here----train_model(----
----train_model(--labels---- tensor([9, 1, 6, 1, 6, 5, 6, 3, 9, 9, 5, 5, 4, 3, 0, 3, 7, 4, 2, 9, 3, 3, 6, 5,
        6, 8, 2, 1, 0, 5, 6, 8, 9, 9, 7, 5, 0, 5, 5, 5, 9, 0, 7, 7, 2, 3, 3, 8,
        8, 0])
----train_model(--labels---- tensor([3, 7, 8, 5, 7, 9, 0, 3, 5, 3, 1, 2, 4, 9, 7, 2, 6, 1, 2, 4, 3, 0, 6, 3,
        9, 4, 0, 3, 4, 7, 3, 3, 9, 6, 2, 9, 6, 2, 7, 3, 7, 6, 9, 1, 9, 2, 8, 7,
        7, 2])
----train_model(--labels---- tensor([7, 3, 1, 3, 1, 1, 5, 5, 6, 5, 4, 0, 8, 4, 0, 1, 8, 6, 6, 3, 1, 4, 8, 8,
        4, 3, 9, 4, 4, 0, 3, 5, 0, 3, 4, 2, 6, 2, 6, 8, 9, 2, 8, 2, 4, 8, 2, 8,
        7, 2])
----train_model(--labels---- tensor([6, 6, 5, 3, 8, 5, 7, 1, 4, 9, 8, 1, 0, 0, 0, 2, 9, 4, 6, 9, 5, 3, 6, 2,
        5, 8, 3, 9, 2, 3, 8, 1, 7, 4, 4, 9, 6, 8, 8, 3, 4, 3, 4, 4, 6, 5, 5, 0,
        3, 1])
----train_model(--labels---- tensor([9, 2, 0, 4, 2, 2, 0, 7, 8, 8, 0, 6, 4, 2, 4, 3, 3, 7, 4, 4, 4, 8, 0, 5,
        7, 7, 8, 6, 0, 8, 0, 3, 0, 4, 5, 9, 2, 5, 4, 8, 1, 9, 3, 5, 1, 6, 5, 2,
        6, 4])
----train_model(--labels---- tensor([7, 8, 2, 3, 5, 1, 6, 8, 0, 5, 7, 5, 3, 3, 6, 0, 6, 2, 8, 4, 0, 4, 7, 1,
        8, 1, 3, 8, 3, 5, 9, 7, 1, 5, 6, 4, 8, 4, 4, 9, 0, 8, 2, 4, 0, 8, 4, 0,
        2, 1])
----train_model(--labels---- tensor([6, 3, 9, 1, 4, 6, 8, 9, 1, 7, 5, 2, 9, 4, 6, 9, 3, 1, 9, 3, 0, 6, 7, 2,
        4, 1, 5, 2, 3, 2, 9, 8, 7, 4, 7, 9, 0, 3, 1, 8, 4, 6, 9, 7, 9, 1, 5, 6,
        3, 5])
----train_model(--labels---- tensor([2, 3, 6, 1, 1, 6, 7, 9, 1, 0, 6, 5, 8, 5, 8, 7, 9, 1, 0, 1, 8, 4, 1, 1,
        7, 7, 4, 6, 9, 7, 6, 1, 9, 0, 2, 2, 3, 2, 2, 8, 7, 5, 6, 7, 9, 9, 5, 0,
        3, 3])
----train_model(--labels---- tensor([3, 5, 7, 9, 8, 3, 2, 8, 2, 2, 4, 3, 0, 6, 8, 9, 7, 4, 1, 7, 7, 5, 4, 6,
        5, 3, 6, 5, 8, 0, 8, 0, 2, 4, 8, 3, 8, 1, 9, 5, 7, 9, 6, 3, 0, 9, 0, 0,
        7, 3])
----train_model(--labels---- tensor([0, 7, 4, 2, 8, 9, 7, 1, 4, 0, 4, 0, 8, 9, 2, 1, 0, 7, 2, 0, 1, 7, 7, 9,
        2, 4, 0, 9, 4, 4, 9, 7, 8, 3, 1, 4, 5, 8, 3, 2, 1, 5, 2, 4, 6, 6, 2, 7,
        6, 5])
----train_model(--labels---- tensor([8, 7, 7, 3, 1, 1, 7, 9, 9, 2, 0, 7, 7, 7, 1, 6, 1, 0, 0, 6, 0, 2, 3, 3,
        2, 1, 9, 1, 9, 2, 3, 4, 1, 5, 8, 4, 1, 4, 1, 4, 9, 4, 6, 7, 6, 5, 5, 7,
        2, 3])
----train_model(--labels---- tensor([1, 5, 1, 3, 9, 9, 2, 8, 2, 7, 8, 6, 5, 8, 9, 3, 5, 7, 8, 3, 4, 1, 9, 0,
        7, 5, 4, 9, 9, 1, 8, 5, 1, 6, 4, 0, 8, 6, 1, 2, 7, 6, 4, 1, 0, 2, 3, 6,
        9, 1])
----train_model(--labels---- tensor([3, 2, 9, 6, 6, 7, 3, 8, 8, 9, 7, 5, 2, 2, 8, 5, 4, 0, 2, 0, 2, 9, 4, 9,
        9, 1, 1, 6, 4, 8, 5, 0, 5, 8, 6, 5, 7, 6, 0, 1, 5, 9, 2, 4, 7, 7, 4, 5,
        8, 3])
----train_model(--labels---- tensor([7, 0, 4, 2, 0, 2, 0, 0, 7, 7, 9, 8, 6, 1, 1, 7, 2, 0, 7, 3, 0, 6, 7, 2,
        9, 1, 3, 4, 1, 9, 2, 3, 5, 4, 2, 6, 3, 3, 7, 6, 1, 6, 4, 7, 0, 7, 5, 0,
        9, 6])
----train_model(--labels---- tensor([8, 6, 5, 2, 7, 2, 2, 1, 1, 7, 5, 5, 6, 2, 3, 0, 0, 9, 2, 9, 2, 3, 0, 3,
        2, 5, 4, 4, 5, 2, 7, 4, 1, 3, 6, 7, 9, 3, 4, 0, 0, 4, 7, 6, 1, 3, 0, 7,
        3, 0])
----train_model(--labels---- tensor([2, 8, 9, 8, 0, 1, 8, 9, 7, 6, 6, 5, 7, 6, 1, 4, 8, 9, 8, 5, 5, 1, 5, 0,
        8, 1, 3, 4, 6, 9, 5, 2, 3, 0, 7, 9, 0, 8, 4, 5, 8, 6, 8, 2, 7, 0, 8, 2,
        6, 6])
----train_model(--labels---- tensor([0, 2, 4, 5, 5, 1, 0, 1, 0, 5, 7, 2, 7, 8, 1, 7, 5, 6, 8, 2, 4, 0, 6, 6,
        7, 5, 2, 6, 3, 7, 0, 9, 4, 0, 5, 7, 3, 0, 6, 1, 9, 4, 8, 9, 1, 3, 5, 4,
        4, 9])
----train_model(--labels---- tensor([9, 7, 9, 3, 9, 6, 2, 8, 1, 6, 1, 8, 8, 9, 5, 1, 5, 8, 3, 8, 4, 9, 8, 1,
        4, 8, 5, 7, 6, 6, 9, 9, 2, 1, 5, 2, 4, 3, 9, 0, 1, 2, 0, 5, 9, 6, 8, 8,
        7, 6])
----train_model(--labels---- tensor([6, 9, 9, 0, 1, 6, 3, 5, 6, 1, 4, 1, 5, 9, 2, 9, 4, 9, 2, 6, 2, 2, 3, 3,
        2, 4, 0, 2, 1, 0, 5, 3, 7, 3, 3, 2, 7, 9, 2, 1, 8, 1, 3, 5, 4, 0, 4, 6,
        5, 9])
----train_model(--labels---- tensor([4, 7, 8, 3, 2, 8, 1, 7, 7, 0, 9, 3, 4, 3, 2, 8, 8, 9, 7, 2, 9, 3, 8, 4,
        5, 8, 4, 1, 7, 5, 5, 4, 3, 3, 5, 1, 1, 8, 5, 1, 3, 0, 2, 4, 1, 5, 1, 9,
        8, 4])
----train_model(--labels---- tensor([2, 4, 8, 3, 8, 8, 9, 2, 4, 5, 2, 1, 7, 4, 2, 6, 3, 0, 5, 8, 0, 2, 3, 7,
        6, 5, 2, 7, 6, 9, 3, 4, 1, 3, 7, 8, 8, 5, 5, 0, 4, 4, 2, 5, 8, 6, 0, 0,
        0, 4])
----train_model(--labels---- tensor([7, 2, 9, 3, 0, 6, 2, 1, 6, 3, 6, 7, 0, 1, 9, 7, 2, 1, 9, 6, 9, 9, 3, 7,
        9, 6, 8, 3, 1, 0, 6, 5, 1, 0, 5, 0, 0, 1, 3, 3, 0, 9, 2, 9, 1, 7, 3, 7,
        0, 7])
----train_model(--labels---- tensor([8, 9, 2, 5, 2, 1, 2, 4, 3, 7, 3, 0, 5, 4, 0, 0, 2, 1, 2, 3, 3, 4, 7, 7,
        3, 9, 7, 5, 3, 5, 9, 5, 8, 7, 5, 1, 1, 3, 1, 6, 6, 8, 2, 9, 9, 8, 2, 7,
        7, 1])
----train_model(--labels---- tensor([4, 9, 4, 2, 4, 2, 2, 1, 7, 2, 0, 5, 3, 2, 2, 4, 4, 8, 3, 5, 4, 4, 1, 3,
        6, 5, 3, 4, 1, 5, 7, 7, 2, 2, 1, 9, 2, 9, 9, 1, 0, 7, 3, 4, 9, 2, 4, 5,
        1, 7])
----train_model(--labels---- tensor([7, 8, 3, 5, 5, 1, 4, 0, 0, 3, 5, 0, 9, 1, 6, 9, 6, 1, 5, 1, 4, 5, 1, 1,
        7, 3, 5, 8, 1, 4, 3, 3, 0, 8, 8, 1, 8, 2, 7, 1, 6, 3, 6, 0, 3, 5, 6, 3,
        2, 1])
----train_model(--labels---- tensor([1, 4, 0, 7, 3, 9, 6, 4, 0, 7, 9, 4, 3, 9, 6, 7, 1, 6, 3, 8, 7, 0, 6, 1,
        1, 3, 0, 3, 0, 0, 0, 6, 8, 8, 8, 1, 6, 8, 6, 4, 6, 7, 3, 4, 1, 2, 0, 8,
        6, 5])
----train_model(--labels---- tensor([7, 5, 9, 5, 9, 8, 1, 9, 9, 0, 1, 9, 6, 9, 3, 8, 6, 4, 9, 4, 5, 7, 5, 7,
        2, 6, 6, 3, 0, 1, 3, 4, 9, 5, 6, 5, 2, 2, 3, 5, 0, 1, 3, 7, 2, 6, 5, 3,
        3, 7])
----train_model(--labels---- tensor([4, 8, 3, 4, 0, 8, 3, 5, 0, 4, 0, 9, 0, 9, 4, 8, 7, 6, 7, 6, 0, 2, 6, 4,
        7, 9, 2, 8, 1, 8, 5, 7, 4, 2, 2, 3, 2, 6, 0, 3, 7, 8, 1, 4, 5, 5, 5, 6,
        7, 1])
----train_model(--labels---- tensor([1, 6, 6, 5, 2, 4, 1, 1, 8, 5, 3, 4, 6, 8, 3, 6, 6, 7, 9, 7, 6, 4, 6, 5,
        3, 9, 0, 1, 9, 9, 7, 2, 6, 3, 8, 4, 2, 5, 0, 5, 0, 3, 8, 0, 4, 5, 4, 8,
        8, 7])
----train_model(--labels---- tensor([3, 9, 0, 1, 5, 7, 2, 4, 5, 4, 5, 1, 5, 9, 6, 1, 0, 8, 5, 5, 3, 0, 1, 9,
        5, 0, 2, 8, 1, 6, 6, 3, 9, 7, 3, 5, 9, 3, 5, 4, 9, 4, 3, 5, 8, 0, 9, 9,
        6, 0])
----train_model(--labels---- tensor([2, 0, 1, 8, 8, 9, 0, 1, 8, 6, 7, 7, 5, 3, 2, 7, 2, 4, 0, 1, 9, 7, 7, 5,
        6, 2, 5, 3, 1, 7, 0, 5, 3, 0, 1, 4, 9, 5, 9, 3, 9, 5, 6, 0, 4, 0, 4, 5,
        0, 2])
----train_model(--labels---- tensor([4, 7, 7, 0, 2, 0, 3, 2, 2, 0, 5, 1, 5, 1, 7, 1, 6, 9, 4, 0, 5, 8, 6, 6,
        1, 5, 6, 4, 2, 0, 9, 7, 7, 2, 6, 0, 5, 1, 1, 0, 4, 9, 9, 2, 0, 1, 2, 2,
        2, 1])
----train_model(--labels---- tensor([2, 9, 5, 1, 7, 2, 7, 2, 4, 6, 3, 5, 9, 4, 3, 1, 4, 4, 1, 3, 6, 3, 1, 2,
        7, 0, 1, 3, 7, 9, 6, 7, 5, 6, 8, 6, 9, 2, 6, 3, 8, 8, 6, 8, 8, 5, 7, 8,
        1, 5])
----train_model(--labels---- tensor([8, 4, 5, 1, 7, 4, 7, 5, 7, 3, 4, 8, 5, 7, 2, 6, 6, 0, 9, 0, 1, 1, 1, 1,
        4, 9, 2, 0, 5, 4, 6, 5, 9, 3, 0, 4, 8, 2, 6, 5, 2, 8, 7, 0, 3, 4, 6, 4,
        9, 4])
----train_model(--labels---- tensor([1, 4, 7, 2, 5, 1, 5, 5, 6, 2, 8, 0, 2, 9, 8, 6, 0, 9, 1, 2, 4, 4, 8, 9,
        6, 0, 6, 3, 6, 6, 4, 2, 1, 8, 7, 7, 1, 2, 1, 6, 4, 7, 1, 7, 5, 5, 8, 8,
        9, 4])
----train_model(--labels---- tensor([1, 3, 6, 8, 7, 3, 9, 6, 8, 9, 4, 9, 6, 6, 3, 4, 6, 7, 3, 6, 0, 3, 6, 7,
        6, 3, 3, 9, 1, 8, 8, 6, 2, 5, 0, 8, 8, 6, 5, 2, 8, 5, 6, 6, 2, 2, 5, 9,
        0, 6])
----train_model(--labels---- tensor([6, 7, 6, 6, 8, 4, 5, 7, 6, 3, 7, 8, 8, 3, 6, 2, 5, 8, 0, 2, 1, 3, 0, 7,
        8, 7, 9, 0, 0, 7, 0, 6, 3, 7, 2, 2, 0, 9, 0, 0, 6, 7, 4, 0, 8, 9, 7, 9,
        8, 9])
----train_model(--labels---- tensor([4, 5, 6, 7, 9, 5, 7, 5, 5, 1, 2, 8, 4, 3, 6, 5, 7, 2, 0, 0, 3, 3, 9, 9,
        3, 3, 0, 8, 4, 7, 2, 2, 1, 6, 5, 2, 3, 5, 1, 2, 9, 5, 8, 3, 3, 8, 2, 6,
        0, 8])
----train_model(--labels---- tensor([4, 1, 2, 9, 4, 9, 0, 9, 8, 2, 2, 5, 8, 7, 4, 9, 2, 2, 6, 0, 8, 8, 6, 9,
        9, 6, 4, 5, 0, 4, 1, 8, 2, 8, 2, 3, 2, 8, 5, 7, 8, 2, 9, 6, 6, 3, 9, 7,
        1, 4])
----train_model(--labels---- tensor([8, 5, 0, 2, 9, 5, 6, 3, 1, 7, 7, 1, 3, 2, 1, 7, 6, 9, 7, 4, 5, 8, 4, 6,
        6, 4, 9, 4, 2, 1, 9, 2, 5, 6, 9, 3, 8, 6, 0, 3, 9, 1, 5, 9, 0, 9, 2, 0,
        2, 8])
----train_model(--labels---- tensor([6, 4, 2, 9, 2, 9, 9, 9, 2, 4, 4, 4, 6, 2, 4, 5, 0, 1, 0, 5, 5, 8, 1, 4,
        2, 7, 7, 3, 0, 9, 9, 5, 6, 0, 7, 2, 5, 0, 5, 9, 6, 6, 3, 5, 3, 9, 6, 1,
        7, 5])
----train_model(--labels---- tensor([3, 0, 1, 3, 9, 0, 1, 4, 2, 2, 2, 6, 3, 3, 5, 7, 3, 8, 4, 1, 5, 4, 9, 4,
        0, 6, 7, 6, 3, 7, 3, 4, 3, 2, 9, 5, 6, 0, 0, 8, 8, 6, 2, 7, 6, 0, 1, 4,
        2, 1])
----train_model(--labels---- tensor([4, 2, 6, 6, 3, 9, 5, 6, 7, 9, 6, 2, 3, 8, 1, 3, 5, 5, 3, 3, 7, 7, 1, 1,
        0, 2, 7, 3, 3, 2, 0, 9, 9, 5, 2, 6, 6, 4, 5, 1, 1, 5, 4, 4, 8, 5, 6, 9,
        7, 4])
----train_model(--labels---- tensor([0, 3, 8, 3, 2, 8, 4, 3, 5, 9, 4, 0, 4, 9, 3, 9, 0, 5, 0, 4, 1, 4, 4, 6,
        4, 9, 7, 2, 7, 3, 7, 0, 6, 1, 5, 1, 0, 3, 5, 3, 4, 7, 1, 6, 5, 8, 7, 2,
        0, 0])
----train_model(--labels---- tensor([0, 6, 1, 1, 1, 1, 8, 8, 3, 1, 4, 7, 1, 1, 8, 4, 5, 6, 2, 8, 0, 6, 4, 7,
        2, 9, 5, 0, 3, 0, 8, 4, 3, 1, 1, 9, 9, 9, 3, 8, 1, 8, 1, 3, 8, 3, 7, 0,
        7, 8])
----train_model(--labels---- tensor([3, 3, 1, 7, 1, 5, 1, 8, 9, 2, 0, 9, 3, 6, 6, 8, 6, 7, 9, 3, 8, 8, 8, 4,
        2, 2, 1, 3, 2, 0, 0, 0, 1, 9, 5, 0, 1, 8, 6, 0, 3, 1, 6, 5, 7, 4, 8, 4,
        9, 9])
----train_model(--labels---- tensor([4, 8, 5, 3, 0, 7, 5, 6, 4, 0, 7, 8, 3, 3, 1, 6, 8, 4, 8, 9, 3, 9, 3, 7,
        6, 5, 2, 5, 7, 5, 2, 5, 5, 8, 7, 9, 6, 2, 7, 6, 4, 0, 1, 3, 4, 0, 0, 2,
        3, 4])
----train_model(--labels---- tensor([8, 2, 7, 7, 5, 6, 0, 6, 4, 5, 6, 5, 7, 1, 3, 7, 8, 1, 1, 0, 0, 2, 5, 8,
        8, 5, 6, 7, 2, 2, 0, 2, 0, 4, 1, 6, 3, 1, 7, 9, 8, 3, 9, 5, 3, 0, 3, 2,
        7, 0])
----train_model(--labels---- tensor([8, 1, 7, 2, 8, 6, 8, 9, 8, 3, 8, 5, 9, 4, 7, 3, 8, 7, 1, 6, 9, 7, 5, 9,
        9, 1, 3, 9, 1, 6, 2, 7, 0, 5, 1, 2, 2, 3, 0, 1, 8, 5, 4, 5, 4, 8, 3, 9,
        0, 6])
----train_model(--labels---- tensor([2, 1, 8, 3, 0, 0, 7, 3, 0, 4, 6, 1, 4, 5, 9, 4, 9, 2, 0, 5, 6, 8, 8, 3,
        2, 3, 4, 0, 0, 8, 2, 1, 1, 5, 8, 2, 6, 7, 0, 6, 3, 6, 3, 7, 5, 1, 6, 9,
        8, 4])
----train_model(--labels---- tensor([5, 0, 6, 9, 6, 3, 2, 8, 6, 7, 1, 6, 8, 7, 3, 1, 2, 9, 6, 7, 9, 4, 2, 5,
        5, 2, 1, 0, 2, 6, 0, 0, 8, 6, 3, 7, 8, 1, 6, 1, 6, 1, 8, 1, 1, 8, 1, 9,
        0, 9])
----train_model(--labels---- tensor([6, 8, 7, 2, 0, 2, 1, 0, 7, 8, 3, 1, 7, 4, 3, 3, 8, 7, 0, 9, 0, 2, 1, 8,
        7, 4, 3, 4, 3, 7, 1, 2, 9, 5, 4, 5, 0, 9, 6, 5, 9, 6, 9, 1, 4, 7, 5, 7,
        5, 8])
----train_model(--labels---- tensor([1, 9, 3, 0, 4, 3, 2, 5, 0, 0, 0, 7, 1, 8, 0, 2, 2, 2, 3, 2, 4, 8, 2, 0,
        4, 6, 7, 6, 3, 0, 2, 6, 5, 6, 7, 1, 1, 6, 9, 3, 1, 3, 1, 4, 9, 7, 8, 8,
        7, 4])
----train_model(--labels---- tensor([7, 2, 0, 2, 5, 3, 2, 3, 1, 9, 3, 1, 9, 8, 2, 5, 5, 4, 2, 6, 2, 3, 9, 3,
        4, 2, 0, 3, 9, 8, 2, 6, 0, 4, 2, 4, 5, 9, 7, 7, 8, 2, 1, 5, 8, 2, 0, 5,
        7, 1])
----train_model(--labels---- tensor([8, 1, 3, 5, 2, 0, 3, 1, 1, 0, 7, 7, 4, 0, 7, 7, 7, 1, 2, 3, 0, 6, 8, 2,
        2, 8, 1, 1, 4, 2, 3, 8, 0, 7, 0, 5, 3, 0, 3, 6, 9, 4, 2, 9, 9, 0, 5, 9,
        8, 7])
----train_model(--labels---- tensor([8, 2, 9, 5, 4, 6, 0, 3, 9, 5, 4, 1, 3, 4, 6, 5, 6, 8, 6, 6, 7, 8, 1, 6,
        9, 6, 5, 9, 2, 8, 0, 2, 2, 8, 3, 4, 7, 7, 9, 5, 3, 8, 5, 5, 3, 6, 0, 1,
        4, 1])
----train_model(--labels---- tensor([0, 9, 3, 9, 0, 0, 4, 2, 3, 4, 4, 8, 5, 9, 1, 7, 7, 1, 6, 6, 3, 6, 5, 7,
        2, 2, 9, 2, 0, 5, 7, 3, 4, 4, 5, 8, 6, 7, 1, 5, 1, 4, 4, 9, 9, 2, 6, 5,
        1, 0])
----train_model(--labels---- tensor([5, 0, 4, 7, 1, 7, 4, 9, 4, 0, 6, 6, 1, 9, 1, 4, 9, 1, 8, 6, 8, 0, 2, 6,
        4, 7, 4, 9, 2, 2, 7, 7, 6, 8, 7, 9, 0, 8, 0, 2, 6, 3, 2, 4, 3, 7, 4, 4,
        1, 8])
----train_model(--labels---- tensor([2, 0, 7, 1, 5, 0, 1, 4, 2, 1, 1, 4, 4, 1, 4, 9, 1, 7, 3, 1, 7, 3, 5, 7,
        8, 7, 0, 3, 7, 2, 1, 5, 9, 0, 7, 3, 8, 1, 2, 9, 1, 5, 3, 8, 4, 7, 8, 6,
        7, 8])
----train_model(--labels---- tensor([3, 6, 9, 0, 4, 1, 7, 6, 1, 4, 8, 5, 5, 5, 7, 7, 9, 8, 4, 0, 5, 2, 5, 2,
        3, 4, 6, 8, 1, 1, 3, 7, 6, 8, 2, 2, 8, 6, 7, 0, 3, 8, 0, 9, 1, 1, 2, 1,
        3, 5])
----train_model(--labels---- tensor([5, 8, 7, 9, 7, 4, 8, 2, 5, 1, 3, 6, 0, 8, 1, 2, 8, 8, 5, 5, 2, 1, 0, 8,
        1, 3, 1, 1, 1, 3, 7, 3, 6, 9, 0, 5, 0, 5, 8, 2, 4, 9, 9, 0, 9, 9, 2, 5,
        8, 4])
----train_model(--labels---- tensor([7, 7, 9, 2, 4, 7, 8, 9, 2, 8, 0, 8, 8, 6, 4, 7, 6, 2, 6, 4, 4, 0, 9, 0,
        8, 9, 4, 6, 4, 3, 5, 6, 0, 5, 5, 5, 0, 6, 5, 4, 2, 8, 5, 4, 2, 0, 8, 1,
        2, 5])
----train_model(--labels---- tensor([2, 6, 8, 8, 2, 6, 2, 5, 2, 7, 3, 8, 4, 4, 7, 3, 7, 0, 3, 1, 6, 0, 1, 2,
        1, 1, 3, 7, 9, 5, 2, 7, 5, 4, 6, 6, 0, 9, 8, 6, 3, 6, 7, 9, 7, 4, 3, 4,
        1, 4])
----train_model(--labels---- tensor([0, 3, 2, 4, 1, 6, 7, 8, 5, 3, 1, 0, 9, 8, 9, 4, 0, 1, 5, 0, 8, 9, 5, 1,
        5, 9, 4, 7, 9, 6, 1, 5, 9, 8, 4, 4, 4, 1, 2, 9, 9, 0, 0, 1, 4, 0, 2, 0,
        3, 9])
----train_model(--labels---- tensor([0, 5, 4, 8, 2, 9, 0, 3, 8, 4, 6, 1, 3, 2, 1, 4, 7, 2, 7, 4, 9, 6, 5, 3,
        5, 4, 4, 7, 3, 3, 1, 8, 2, 0, 1, 0, 2, 7, 1, 7, 1, 2, 3, 7, 5, 6, 2, 8,
        8, 5])
----train_model(--labels---- tensor([9, 8, 9, 2, 8, 6, 5, 3, 9, 5, 7, 9, 9, 3, 9, 0, 1, 7, 1, 8, 9, 2, 8, 0,
        7, 4, 5, 7, 8, 9, 2, 5, 1, 3, 0, 8, 3, 3, 3, 5, 0, 4, 4, 6, 9, 1, 8, 2,
        9, 5])
----train_model(--labels---- tensor([1, 9, 2, 2, 8, 6, 6, 2, 9, 3, 6, 6, 1, 1, 4, 1, 5, 5, 2, 9, 9, 1, 6, 3,
        6, 5, 5, 3, 2, 7, 4, 0, 5, 8, 4, 8, 3, 6, 3, 7, 9, 0, 3, 7, 9, 9, 8, 0,
        1, 7])
----train_model(--labels---- tensor([4, 5, 9, 1, 6, 4, 7, 5, 5, 3, 0, 7, 9, 6, 8, 2, 4, 8, 9, 6, 1, 9, 2, 9,
        9, 7, 9, 9, 2, 9, 9, 6, 6, 0, 1, 2, 9, 2, 4, 9, 7, 5, 4, 1, 3, 9, 3, 8,
        7, 3])
----train_model(--labels---- tensor([8, 8, 1, 0, 7, 2, 6, 1, 5, 9, 9, 6, 6, 1, 1, 4, 0, 3, 5, 4, 6, 1, 2, 2,
        0, 4, 2, 1, 1, 8, 0, 4, 2, 9, 4, 5, 0, 5, 7, 9, 3, 3, 6, 4, 6, 4, 9, 9,
        0, 3])
----train_model(--labels---- tensor([3, 6, 6, 5, 1, 1, 2, 9, 0, 0, 9, 8, 9, 9, 7, 9, 6, 8, 8, 4, 0, 6, 2, 7,
        1, 0, 6, 8, 8, 6, 4, 6, 0, 5, 8, 7, 9, 4, 5, 0, 1, 4, 7, 0, 5, 9, 5, 9,
        3, 4])
----train_model(--labels---- tensor([2, 4, 4, 8, 2, 8, 3, 0, 4, 2, 7, 0, 2, 1, 2, 5, 4, 5, 3, 6, 6, 9, 2, 6,
        3, 0, 7, 2, 2, 2, 1, 4, 8, 1, 9, 7, 5, 3, 5, 8, 5, 4, 4, 7, 5, 7, 1, 7,
        1, 1])
----train_model(--labels---- tensor([4, 0, 3, 4, 4, 4, 0, 1, 4, 9, 5, 2, 9, 9, 0, 2, 0, 9, 3, 8, 0, 7, 4, 3,
        6, 6, 9, 6, 4, 7, 3, 7, 9, 3, 4, 8, 4, 2, 2, 7, 2, 7, 6, 8, 4, 4, 9, 6,
        4, 3])
----train_model(--labels---- tensor([0, 0, 9, 2, 8, 3, 0, 4, 3, 6, 2, 4, 6, 7, 1, 4, 2, 8, 0, 7, 6, 6, 4, 5,
        7, 9, 0, 7, 1, 6, 6, 5, 2, 6, 5, 9, 7, 2, 0, 2, 4, 9, 4, 5, 6, 6, 6, 0,
        7, 0])
----train_model(--labels---- tensor([8, 2, 1, 2, 5, 5, 8, 0, 9, 0, 2, 4, 8, 9, 0, 0, 5, 7, 0, 8, 1, 0, 5, 9,
        0, 6, 3, 1, 4, 8, 7, 4, 4, 3, 8, 5, 0, 3, 1, 6, 6, 5, 9, 4, 6, 8, 6, 0,
        8, 6])
----train_model(--labels---- tensor([2, 5, 3, 5, 3, 7, 4, 9, 6, 1, 4, 4, 7, 2, 9, 6, 4, 2, 3, 1, 9, 3, 6, 1,
        7, 8, 9, 5, 8, 8, 2, 7, 8, 7, 8, 4, 2, 4, 8, 2, 8, 9, 3, 0, 1, 6, 3, 6,
        1, 5])
----train_model(--labels---- tensor([1, 3, 0, 3, 0, 9, 0, 0, 1, 2, 1, 9, 6, 5, 4, 8, 0, 3, 9, 8, 5, 9, 0, 7,
        2, 3, 3, 0, 0, 3, 6, 5, 4, 9, 5, 8, 6, 9, 9, 1, 1, 5, 8, 1, 6, 2, 3, 6,
        0, 3])
----train_model(--labels---- tensor([2, 2, 8, 1, 3, 5, 0, 1, 8, 3, 5, 8, 8, 7, 1, 6, 1, 5, 7, 2, 6, 5, 4, 7,
        9, 9, 7, 6, 1, 8, 1, 7, 4, 2, 7, 7, 8, 6, 2, 4, 8, 0, 1, 4, 2, 1, 7, 9,
        8, 9])
----train_model(--labels---- tensor([4, 4, 8, 7, 7, 9, 6, 8, 7, 5, 3, 6, 6, 2, 1, 5, 7, 1, 3, 6, 9, 8, 6, 3,
        5, 9, 2, 5, 4, 1, 7, 0, 6, 5, 4, 3, 2, 0, 3, 7, 0, 5, 2, 0, 6, 1, 4, 6,
        5, 2])
----train_model(--labels---- tensor([2, 9, 4, 0, 5, 3, 5, 6, 5, 6, 1, 5, 5, 9, 4, 3, 1, 9, 4, 0, 2, 7, 9, 9,
        1, 7, 4, 1, 3, 8, 7, 7, 0, 1, 7, 2, 1, 4, 6, 9, 4, 7, 7, 7, 7, 6, 8, 8,
        6, 1])
----train_model(--labels---- tensor([4, 9, 8, 2, 7, 5, 2, 5, 9, 2, 0, 1, 4, 6, 0, 6, 9, 6, 6, 0, 8, 3, 4, 6,
        6, 3, 1, 4, 1, 8, 7, 6, 4, 7, 6, 5, 1, 7, 1, 9, 9, 6, 7, 8, 9, 8, 1, 5,
        1, 1])
----train_model(--labels---- tensor([0, 5, 4, 2, 2, 1, 3, 6, 9, 2, 9, 7, 1, 1, 9, 8, 7, 6, 3, 1, 7, 6, 9, 0,
        9, 4, 7, 3, 4, 5, 9, 8, 8, 6, 9, 6, 8, 6, 2, 4, 9, 5, 7, 3, 9, 6, 2, 1,
        3, 9])
----train_model(--labels---- tensor([8, 5, 4, 5, 0, 5, 4, 7, 0, 3, 9, 2, 8, 1, 2, 5, 9, 9, 9, 3, 6, 8, 6, 1,
        7, 5, 3, 0, 6, 5, 7, 3, 6, 6, 1, 5, 0, 6, 6, 5, 5, 0, 5, 1, 9, 7, 1, 5,
        5, 4])
----train_model(--labels---- tensor([9, 7, 4, 6, 2, 3, 6, 3, 8, 0, 0, 2, 2, 1, 2, 0, 8, 8, 7, 2, 0, 1, 8, 0,
        1, 9, 2, 3, 6, 7, 8, 6, 8, 0, 0, 7, 9, 3, 5, 4, 7, 0, 8, 7, 9, 1, 2, 9,
        2, 6])
----train_model(--labels---- tensor([6, 4, 7, 7, 0, 3, 0, 1, 2, 0, 6, 7, 9, 0, 4, 0, 2, 7, 9, 6, 7, 2, 1, 0,
        2, 6, 5, 7, 2, 8, 6, 3, 7, 8, 2, 5, 2, 7, 1, 4, 9, 7, 4, 4, 3, 8, 4, 8,
        4, 9])
----train_model(--labels---- tensor([0, 5, 1, 6, 6, 7, 8, 1, 0, 8, 0, 4, 1, 3, 7, 1, 0, 0, 9, 7, 8, 1, 0, 0,
        2, 9, 1, 1, 7, 1, 7, 7, 5, 1, 9, 4, 3, 0, 1, 0, 4, 5, 5, 8, 4, 4, 6, 0,
        6, 2])
----train_model(--labels---- tensor([7, 6, 2, 4, 2, 3, 6, 8, 7, 2, 4, 1, 7, 4, 4, 5, 3, 3, 9, 7, 1, 9, 2, 5,
        8, 8, 7, 7, 2, 2, 3, 1, 2, 3, 3, 9, 9, 1, 5, 8, 3, 0, 0, 0, 3, 6, 7, 0,
        9, 9])
----train_model(--labels---- tensor([5, 4, 6, 8, 7, 8, 4, 8, 7, 2, 5, 8, 9, 1, 7, 1, 2, 1, 3, 7, 6, 8, 2, 7,
        2, 0, 1, 1, 3, 1, 1, 6, 6, 0, 7, 8, 5, 0, 2, 1, 9, 1, 5, 4, 4, 9, 8, 3,
        3, 1])
----train_model(--labels---- tensor([2, 5, 8, 3, 1, 5, 0, 6, 2, 8, 8, 4, 0, 8, 1, 2, 6, 0, 5, 8, 4, 5, 3, 8,
        0, 0, 3, 6, 0, 6, 0, 6, 4, 1, 6, 7, 3, 2, 2, 9, 5, 3, 1, 5, 9, 3, 5, 7,
        8, 1])
----train_model(--labels---- tensor([4, 8, 4, 5, 7, 6, 3, 1, 1, 5, 1, 9, 2, 7, 9, 6, 6, 7, 5, 3, 0, 4, 6, 1,
        5, 7, 1, 5, 3, 6, 3, 6, 4, 9, 2, 6, 7, 1, 5, 3, 3, 1, 0, 9, 4, 6, 7, 7,
        9, 8])
----train_model(--labels---- tensor([9, 6, 3, 6, 6, 7, 9, 0, 8, 8, 1, 8, 7, 5, 2, 2, 7, 6, 3, 7, 6, 6, 2, 8,
        7, 9, 8, 1, 5, 9, 4, 4, 0, 1, 3, 5, 0, 2, 1, 9, 4, 2, 2, 1, 3, 2, 5, 8,
        7, 6])
----train_model(--labels---- tensor([6, 8, 7, 7, 2, 7, 6, 9, 8, 5, 4, 3, 3, 5, 7, 0, 4, 9, 0, 4, 1, 6, 7, 0,
        3, 5, 5, 7, 6, 9, 2, 0, 6, 6, 6, 2, 5, 7, 2, 7, 5, 7, 1, 3, 1, 3, 3, 2,
        7, 6])
----train_model(--labels---- tensor([9, 2, 5, 5, 6, 2, 0, 4, 1, 7, 6, 3, 8, 9, 9, 2, 4, 2, 6, 9, 9, 5, 1, 2,
        9, 0, 4, 2, 5, 4, 3, 2, 3, 0, 9, 0, 9, 1, 4, 9, 4, 8, 0, 4, 7, 8, 7, 2,
        2, 3])
----train_model(--labels---- tensor([7, 9, 4, 7, 9, 5, 3, 3, 8, 9, 0, 5, 9, 3, 0, 9, 6, 8, 1, 4, 1, 3, 1, 2,
        1, 4, 3, 6, 0, 1, 3, 1, 0, 3, 8, 6, 6, 7, 0, 8, 6, 8, 2, 9, 5, 3, 7, 1,
        4, 9])
----train_model(--labels---- tensor([5, 8, 5, 7, 2, 7, 3, 4, 3, 2, 7, 2, 8, 7, 8, 5, 0, 1, 6, 9, 8, 6, 2, 6,
        4, 8, 7, 4, 8, 2, 3, 5, 7, 9, 0, 4, 4, 6, 3, 7, 1, 5, 8, 8, 7, 6, 6, 6,
        9, 9])
----train_model(--labels---- tensor([9, 9, 6, 6, 6, 3, 0, 9, 4, 5, 0, 6, 6, 0, 6, 2, 7, 5, 6, 8, 8, 4, 9, 2,
        3, 4, 5, 6, 0, 6, 5, 0, 4, 6, 5, 6, 7, 6, 9, 9, 5, 7, 1, 8, 8, 3, 9, 0,
        8, 4])
----train_model(--labels---- tensor([5, 8, 2, 8, 3, 1, 3, 0, 1, 6, 9, 5, 9, 3, 1, 9, 3, 4, 1, 1, 0, 6, 3, 1,
        3, 0, 7, 2, 8, 5, 4, 2, 5, 7, 7, 0, 4, 3, 6, 7, 5, 3, 9, 3, 1, 4, 2, 5,
        5, 5])
----train_model(--labels---- tensor([9, 4, 5, 5, 2, 2, 0, 8, 4, 5, 6, 0, 2, 5, 7, 4, 2, 8, 4, 1, 3, 3, 5, 7,
        5, 3, 3, 3, 8, 3, 0, 3, 0, 6, 3, 6, 9, 2, 5, 8, 2, 6, 8, 8, 4, 0, 4, 0,
        9, 6])
----train_model(--labels---- tensor([4, 8, 9, 8, 3, 1, 9, 0, 2, 3, 6, 6, 0, 7, 1, 7, 4, 4, 6, 0, 2, 4, 2, 2,
        3, 1, 5, 1, 7, 2, 1, 7, 7, 5, 7, 1, 9, 5, 0, 7, 5, 8, 5, 6, 3, 5, 9, 2,
        7, 2])
----train_model(--labels---- tensor([4, 8, 9, 8, 0, 4, 2, 2, 3, 4, 1, 3, 1, 3, 3, 2, 1, 7, 9, 5, 8, 6, 5, 2,
        9, 4, 2, 3, 1, 2, 6, 3, 2, 5, 7, 5, 6, 9, 2, 7, 1, 4, 2, 0, 5, 5, 1, 3,
        6, 6])
----train_model(--labels---- tensor([4, 9, 2, 9, 5, 2, 0, 2, 5, 0, 6, 4, 7, 1, 3, 1, 2, 0, 6, 8, 6, 2, 6, 1,
        2, 0, 1, 4, 4, 4, 1, 3, 4, 0, 8, 6, 7, 5, 0, 0, 1, 4, 8, 8, 1, 4, 6, 9,
        4, 0])
----train_model(--labels---- tensor([1, 8, 4, 3, 8, 8, 8, 7, 7, 0, 0, 1, 0, 1, 5, 3, 9, 8, 8, 9, 4, 0, 5, 5,
        0, 6, 0, 6, 5, 7, 3, 0, 7, 8, 6, 8, 7, 2, 7, 1, 8, 1, 2, 2, 8, 5, 7, 6,
        8, 2])
----train_model(--labels---- tensor([2, 9, 7, 4, 8, 0, 5, 3, 0, 8, 6, 6, 3, 4, 3, 3, 6, 3, 5, 9, 7, 4, 9, 1,
        4, 5, 7, 3, 0, 0, 3, 9, 1, 7, 3, 5, 5, 6, 6, 1, 9, 6, 8, 7, 0, 0, 7, 6,
        8, 1])
----train_model(--labels---- tensor([1, 4, 0, 4, 5, 5, 3, 8, 4, 4, 2, 9, 1, 4, 3, 0, 3, 6, 2, 7, 5, 5, 2, 5,
        4, 9, 0, 7, 4, 1, 4, 3, 6, 1, 9, 7, 4, 6, 8, 1, 3, 9, 3, 0, 3, 8, 9, 8,
        2, 7])
----train_model(--labels---- tensor([0, 2, 1, 3, 0, 0, 9, 3, 4, 7, 7, 9, 1, 8, 2, 8, 2, 9, 0, 7, 4, 8, 9, 4,
        3, 8, 5, 1, 6, 9, 5, 5, 2, 4, 0, 7, 0, 1, 1, 2, 4, 9, 9, 4, 1, 4, 4, 8,
        3, 5])
----train_model(--labels---- tensor([3, 2, 8, 1, 6, 6, 6, 8, 0, 5, 9, 5, 5, 6, 8, 9, 0, 4, 5, 1, 4, 2, 5, 5,
        6, 1, 7, 3, 8, 1, 6, 6, 8, 2, 9, 5, 8, 7, 9, 8, 1, 3, 4, 7, 9, 7, 5, 0,
        0, 1])
----train_model(--labels---- tensor([2, 6, 5, 5, 7, 0, 4, 5, 1, 3, 6, 8, 8, 5, 9, 6, 4, 2, 0, 7, 7, 5, 7, 9,
        0, 8, 9, 8, 0, 2, 1, 3, 5, 5, 9, 2, 2, 5, 3, 9, 3, 8, 4, 1, 5, 2, 6, 1,
        0, 1])
----train_model(--labels---- tensor([9, 2, 4, 5, 6, 4, 8, 4, 5, 5, 9, 6, 4, 3, 8, 3, 8, 0, 2, 9, 2, 3, 4, 8,
        0, 3, 3, 6, 1, 2, 3, 3, 0, 7, 7, 8, 8, 8, 5, 3, 3, 2, 1, 2, 0, 7, 8, 2,
        7, 4])
----train_model(--labels---- tensor([5, 1, 8, 1, 4, 0, 1, 0, 5, 0, 1, 5, 8, 8, 0, 2, 5, 7, 1, 3, 2, 0, 5, 7,
        9, 8, 2, 4, 9, 6, 2, 2, 4, 6, 0, 0, 9, 6, 6, 4, 6, 4, 4, 0, 0, 6, 3, 0,
        4, 5])
----train_model(--labels---- tensor([2, 1, 8, 6, 4, 1, 5, 2, 0, 8, 0, 0, 5, 4, 4, 6, 0, 1, 8, 2, 7, 2, 5, 2,
        5, 9, 3, 0, 1, 3, 8, 6, 7, 0, 3, 4, 3, 8, 8, 6, 7, 1, 8, 3, 5, 8, 1, 6,
        9, 6])
----train_model(--labels---- tensor([2, 4, 0, 6, 2, 4, 5, 4, 9, 2, 8, 2, 7, 7, 9, 0, 5, 0, 9, 2, 7, 6, 6, 7,
        8, 6, 5, 1, 5, 7, 4, 4, 3, 2, 8, 3, 1, 2, 6, 5, 1, 7, 9, 6, 3, 3, 4, 8,
        2, 8])
----train_model(--labels---- tensor([7, 5, 5, 9, 4, 4, 9, 8, 4, 4, 6, 8, 3, 2, 5, 3, 3, 9, 6, 5, 2, 7, 4, 4,
        8, 0, 6, 9, 0, 2, 3, 5, 3, 0, 5, 0, 5, 1, 9, 2, 2, 5, 4, 6, 3, 9, 4, 7,
        3, 9])
----train_model(--labels---- tensor([7, 0, 4, 3, 0, 0, 1, 5, 6, 6, 3, 9, 8, 3, 3, 1, 9, 8, 6, 8, 1, 0, 6, 0,
        4, 1, 6, 1, 5, 7, 1, 3, 0, 1, 9, 1, 1, 0, 0, 6, 2, 3, 3, 9, 1, 8, 9, 1,
        3, 3])
----train_model(--labels---- tensor([1, 1, 7, 7, 9, 0, 1, 5, 5, 9, 1, 3, 2, 0, 3, 4, 9, 2, 9, 8, 0, 0, 3, 9,
        0, 9, 5, 7, 9, 8, 1, 4, 4, 1, 3, 6, 0, 4, 4, 3, 6, 0, 2, 3, 5, 9, 8, 7,
        1, 1])
----train_model(--labels---- tensor([1, 9, 4, 9, 4, 7, 0, 5, 2, 3, 4, 4, 2, 4, 5, 4, 7, 2, 8, 3, 0, 4, 5, 6,
        8, 3, 8, 3, 1, 7, 4, 6, 7, 2, 4, 1, 1, 0, 6, 2, 5, 1, 3, 8, 5, 0, 0, 8,
        4, 0])
----train_model(--labels---- tensor([5, 3, 6, 5, 0, 5, 8, 7, 3, 4, 6, 6, 7, 0, 2, 8, 2, 8, 8, 0, 1, 1, 4, 4,
        7, 7, 6, 2, 2, 9, 2, 9, 9, 6, 2, 2, 6, 6, 6, 3, 2, 1, 2, 3, 2, 0, 3, 8,
        2, 8])
----train_model(--labels---- tensor([1, 6, 3, 5, 7, 9, 1, 5, 8, 5, 7, 3, 7, 6, 1, 9, 2, 3, 4, 9, 8, 0, 3, 1,
        2, 7, 3, 2, 2, 6, 7, 8, 2, 9, 7, 8, 6, 6, 0, 8, 5, 8, 9, 3, 6, 1, 1, 7,
        5, 9])
----train_model(--labels---- tensor([2, 1, 2, 6, 7, 7, 1, 1, 4, 2, 0, 9, 3, 7, 1, 7, 7, 6, 0, 8, 7, 3, 3, 4,
        4, 8, 5, 7, 5, 7, 0, 6, 0, 1, 2, 3, 8, 6, 0, 2, 5, 8, 7, 6, 6, 2, 5, 4,
        5, 5])
----train_model(--labels---- tensor([3, 3, 2, 0, 6, 2, 7, 6, 9, 5, 2, 5, 2, 8, 6, 3, 5, 3, 4, 0, 9, 3, 7, 9,
        6, 7, 6, 1, 9, 6, 4, 7, 4, 8, 3, 1, 8, 0, 2, 8, 1, 7, 1, 7, 3, 1, 5, 3,
        1, 2])
----train_model(--labels---- tensor([7, 0, 4, 8, 6, 8, 4, 9, 0, 6, 5, 6, 0, 3, 1, 6, 7, 5, 4, 0, 7, 9, 6, 4,
        0, 6, 7, 9, 0, 0, 6, 3, 2, 1, 0, 8, 2, 1, 2, 7, 4, 8, 3, 4, 3, 4, 8, 4,
        7, 6])
----train_model(--labels---- tensor([2, 5, 1, 9, 8, 1, 8, 8, 7, 4, 1, 4, 3, 7, 7, 7, 1, 5, 1, 6, 1, 9, 3, 7,
        9, 4, 6, 1, 7, 6, 2, 4, 7, 8, 5, 9, 6, 8, 3, 1, 8, 9, 0, 2, 1, 6, 1, 4,
        1, 6])
----train_model(--labels---- tensor([8, 2, 7, 2, 0, 8, 0, 0, 9, 9, 1, 0, 0, 3, 8, 1, 8, 9, 8, 9, 6, 0, 0, 7,
        8, 9, 5, 9, 2, 8, 5, 6, 5, 7, 1, 6, 9, 7, 5, 6, 4, 4, 2, 2, 5, 2, 1, 3,
        6, 6])
----train_model(--labels---- tensor([5, 8, 2, 2, 1, 2, 8, 4, 3, 1, 3, 5, 3, 3, 2, 2, 4, 8, 6, 4, 7, 5, 6, 7,
        6, 0, 7, 9, 1, 0, 1, 2, 3, 3, 6, 0, 8, 5, 5, 3, 9, 0, 7, 8, 6, 6, 3, 8,
        6, 5])
----train_model(--labels---- tensor([7, 5, 5, 1, 2, 6, 3, 5, 5, 6, 3, 0, 4, 1, 9, 2, 8, 2, 8, 6, 3, 0, 3, 6,
        9, 6, 2, 6, 8, 9, 0, 2, 5, 2, 3, 8, 7, 6, 1, 0, 3, 9, 2, 7, 0, 4, 4, 9,
        5, 9])
----train_model(--labels---- tensor([5, 2, 2, 6, 8, 4, 4, 9, 4, 6, 8, 7, 2, 0, 4, 9, 3, 5, 7, 9, 9, 8, 2, 8,
        8, 2, 3, 1, 3, 3, 2, 2, 4, 7, 9, 7, 4, 4, 8, 2, 5, 4, 9, 3, 8, 8, 9, 2,
        9, 7])
----train_model(--labels---- tensor([9, 0, 0, 3, 6, 4, 9, 2, 0, 2, 9, 3, 0, 9, 2, 5, 0, 0, 6, 9, 8, 9, 7, 7,
        9, 5, 5, 3, 6, 9, 7, 8, 1, 0, 8, 7, 6, 4, 3, 9, 6, 0, 1, 6, 4, 5, 7, 0,
        4, 1])
----train_model(--labels---- tensor([0, 5, 5, 2, 0, 4, 0, 4, 2, 3, 7, 7, 5, 3, 0, 0, 5, 1, 5, 2, 7, 3, 2, 0,
        8, 5, 7, 3, 6, 1, 4, 3, 6, 7, 3, 6, 9, 2, 5, 1, 6, 8, 8, 4, 1, 6, 0, 6,
        5, 0])
----train_model(--labels---- tensor([8, 4, 4, 5, 6, 0, 0, 8, 8, 8, 9, 6, 1, 0, 4, 1, 0, 7, 7, 8, 9, 2, 5, 3,
        7, 6, 1, 7, 7, 9, 2, 1, 9, 9, 8, 8, 6, 3, 4, 9, 1, 5, 1, 9, 5, 4, 5, 9,
        3, 0])
----train_model(--labels---- tensor([4, 7, 5, 0, 8, 3, 2, 5, 9, 5, 8, 3, 6, 6, 4, 5, 9, 2, 7, 6, 9, 7, 1, 1,
        7, 7, 8, 6, 5, 9, 4, 0, 5, 9, 3, 9, 9, 5, 9, 7, 8, 1, 1, 5, 9, 8, 2, 4,
        7, 1])
----train_model(--labels---- tensor([8, 8, 2, 4, 4, 4, 4, 0, 5, 1, 6, 7, 8, 5, 6, 6, 1, 2, 5, 1, 8, 2, 5, 7,
        5, 6, 2, 5, 4, 0, 9, 1, 3, 6, 0, 5, 6, 2, 2, 7, 9, 7, 5, 5, 4, 5, 0, 0,
        6, 9])
----train_model(--labels---- tensor([1, 7, 6, 2, 6, 7, 0, 0, 7, 3, 1, 9, 9, 0, 0, 1, 6, 8, 6, 8, 5, 4, 0, 3,
        3, 6, 6, 8, 3, 4, 6, 3, 4, 6, 6, 2, 0, 8, 1, 6, 7, 7, 4, 8, 3, 6, 9, 6,
        3, 4])
----train_model(--labels---- tensor([9, 4, 6, 7, 4, 0, 5, 8, 2, 7, 1, 8, 6, 2, 4, 2, 2, 4, 3, 0, 8, 0, 1, 5,
        5, 6, 7, 5, 0, 5, 9, 4, 7, 5, 8, 3, 2, 4, 4, 9, 5, 3, 2, 7, 2, 1, 0, 2,
        5, 4])
----train_model(--labels---- tensor([9, 1, 1, 2, 0, 1, 8, 8, 1, 7, 4, 0, 8, 6, 6, 2, 4, 3, 4, 9, 9, 3, 7, 2,
        1, 4, 4, 7, 8, 7, 3, 8, 7, 0, 7, 1, 2, 2, 2, 2, 9, 8, 7, 0, 8, 7, 7, 0,
        6, 2])
----train_model(--labels---- tensor([8, 0, 8, 4, 1, 7, 9, 4, 5, 7, 3, 2, 5, 5, 1, 4, 5, 6, 9, 3, 8, 0, 4, 9,
        8, 5, 8, 7, 2, 6, 6, 7, 7, 2, 3, 3, 6, 7, 8, 3, 6, 5, 5, 1, 4, 4, 9, 5,
        2, 6])
----train_model(--labels---- tensor([7, 9, 8, 7, 7, 0, 0, 7, 8, 2, 2, 2, 1, 3, 4, 5, 1, 4, 7, 1, 1, 4, 8, 5,
        8, 9, 2, 8, 6, 1, 2, 2, 0, 3, 0, 9, 6, 8, 3, 7, 9, 4, 5, 6, 8, 0, 6, 4,
        6, 2])
----train_model(--labels---- tensor([1, 0, 1, 1, 1, 6, 4, 1, 0, 5, 3, 9, 6, 1, 7, 6, 2, 7, 2, 1, 3, 9, 4, 8,
        6, 0, 1, 6, 7, 7, 6, 1, 4, 3, 2, 4, 1, 8, 7, 6, 8, 9, 3, 3, 7, 1, 4, 5,
        6, 7])
----train_model(--labels---- tensor([1, 5, 5, 9, 7, 2, 4, 6, 8, 6, 6, 6, 4, 7, 2, 4, 2, 7, 1, 3, 4, 3, 4, 8,
        3, 7, 6, 2, 3, 8, 5, 1, 4, 9, 4, 2, 2, 3, 0, 9, 3, 6, 7, 6, 4, 5, 2, 1,
        8, 5])
----train_model(--labels---- tensor([1, 7, 9, 7, 5, 2, 6, 5, 4, 6, 1, 9, 5, 2, 9, 8, 5, 4, 3, 5, 8, 7, 1, 7,
        8, 9, 9, 5, 0, 6, 5, 4, 0, 5, 8, 4, 0, 4, 2, 8, 3, 0, 0, 7, 0, 0, 9, 2,
        2, 5])
----train_model(--labels---- tensor([5, 4, 6, 8, 1, 0, 9, 9, 2, 4, 6, 7, 4, 1, 1, 7, 1, 2, 9, 6, 4, 8, 4, 4,
        4, 5, 7, 0, 2, 1, 7, 9, 1, 3, 4, 0, 2, 8, 3, 1, 9, 4, 5, 7, 0, 9, 6, 4,
        8, 0])
----train_model(--labels---- tensor([5, 8, 4, 3, 9, 5, 6, 5, 3, 3, 0, 8, 4, 5, 1, 2, 2, 0, 1, 7, 8, 2, 1, 3,
        9, 3, 6, 7, 0, 0, 0, 7, 2, 3, 7, 6, 0, 1, 8, 1, 9, 8, 6, 1, 5, 3, 9, 6,
        3, 3])
----train_model(--labels---- tensor([1, 5, 1, 8, 3, 6, 3, 2, 6, 3, 7, 9, 9, 0, 3, 0, 9, 4, 6, 6, 1, 0, 3, 7,
        7, 6, 6, 3, 6, 7, 6, 8, 3, 7, 5, 6, 0, 8, 0, 4, 3, 4, 3, 9, 0, 2, 0, 1,
        9, 8])
----train_model(--labels---- tensor([9, 4, 2, 1, 2, 9, 4, 3, 3, 3, 7, 8, 3, 3, 0, 1, 5, 4, 7, 9, 8, 7, 9, 4,
        7, 2, 7, 4, 1, 0, 0, 7, 7, 3, 8, 6, 2, 9, 3, 3, 7, 2, 0, 3, 0, 8, 0, 2,
        2, 4])
----train_model(--labels---- tensor([4, 2, 1, 7, 2, 4, 3, 3, 5, 2, 0, 0, 4, 0, 2, 9, 3, 0, 9, 2, 3, 5, 9, 8,
        5, 9, 2, 7, 8, 8, 6, 3, 1, 1, 5, 5, 9, 0, 9, 7, 6, 6, 4, 9, 9, 3, 9, 8,
        3, 4])
----train_model(--labels---- tensor([7, 0, 8, 7, 3, 2, 4, 4, 5, 4, 7, 1, 5, 3, 4, 2, 3, 3, 4, 2, 4, 5, 0, 6,
        7, 1, 8, 0, 8, 2, 5, 1, 7, 3, 6, 8, 7, 2, 3, 3, 7, 5, 5, 0, 2, 0, 1, 8,
        0, 9])
----train_model(--labels---- tensor([1, 1, 9, 2, 2, 7, 0, 1, 2, 2, 3, 3, 4, 4, 4, 2, 9, 7, 0, 1, 2, 9, 0, 9,
        5, 4, 3, 1, 5, 6, 2, 7, 0, 5, 0, 2, 5, 2, 3, 2, 5, 0, 0, 5, 9, 3, 6, 7,
        4, 2])
----train_model(--labels---- tensor([6, 3, 6, 6, 9, 4, 8, 2, 3, 3, 4, 2, 0, 2, 2, 2, 2, 2, 5, 0, 8, 1, 0, 9,
        2, 4, 7, 7, 4, 2, 8, 8, 6, 6, 9, 7, 4, 8, 3, 8, 4, 9, 7, 3, 4, 1, 7, 5,
        2, 0])
----train_model(--labels---- tensor([6, 6, 0, 4, 7, 5, 2, 8, 0, 4, 4, 3, 0, 6, 3, 9, 4, 2, 9, 3, 2, 2, 9, 2,
        8, 9, 9, 2, 4, 0, 3, 4, 9, 2, 1, 9, 0, 4, 9, 7, 9, 6, 0, 2, 0, 4, 5, 5,
        7, 6])
----train_model(--labels---- tensor([3, 9, 5, 9, 4, 1, 6, 3, 1, 7, 4, 0, 6, 1, 2, 7, 0, 3, 1, 3, 9, 7, 9, 0,
        9, 0, 6, 9, 7, 9, 2, 6, 4, 2, 7, 7, 4, 2, 9, 0, 0, 5, 1, 5, 9, 5, 8, 0,
        9, 4])
----train_model(--labels---- tensor([0, 6, 3, 5, 3, 2, 9, 1, 5, 5, 4, 2, 0, 5, 8, 3, 9, 4, 4, 1, 7, 9, 9, 3,
        8, 9, 5, 7, 0, 6, 3, 0, 8, 4, 3, 3, 8, 4, 7, 3, 8, 1, 7, 5, 4, 5, 7, 4,
        7, 4])
----train_model(--labels---- tensor([9, 2, 9, 9, 9, 8, 2, 1, 5, 6, 3, 6, 9, 3, 9, 9, 2, 4, 0, 8, 8, 9, 1, 4,
        5, 4, 0, 7, 2, 1, 1, 0, 3, 9, 4, 6, 5, 4, 8, 2, 2, 9, 9, 9, 1, 4, 6, 7,
        3, 3])
----train_model(--labels---- tensor([1, 1, 1, 9, 0, 1, 0, 0, 7, 6, 6, 2, 0, 6, 8, 4, 0, 1, 9, 7, 5, 6, 2, 8,
        1, 5, 2, 3, 2, 3, 1, 5, 2, 2, 3, 2, 6, 4, 9, 4, 0, 6, 3, 2, 4, 6, 8, 5,
        4, 8])
----train_model(--labels---- tensor([5, 0, 9, 5, 2, 8, 9, 2, 2, 7, 5, 8, 3, 2, 4, 5, 6, 0, 3, 8, 2, 2, 9, 7,
        7, 1, 8, 7, 1, 8, 8, 0, 5, 6, 0, 5, 9, 7, 3, 1, 5, 7, 6, 7, 8, 2, 6, 4,
        5, 2])
----train_model(--labels---- tensor([7, 3, 9, 5, 8, 4, 1, 2, 8, 2, 4, 6, 1, 4, 7, 7, 0, 2, 9, 8, 6, 3, 3, 5,
        9, 0, 6, 6, 9, 7, 2, 1, 4, 1, 0, 9, 8, 3, 2, 0, 7, 8, 3, 3, 0, 8, 3, 2,
        9, 7])
----train_model(--labels---- tensor([3, 2, 0, 4, 4, 5, 6, 7, 7, 3, 7, 8, 0, 1, 2, 1, 9, 0, 1, 0, 0, 7, 5, 1,
        2, 4, 5, 3, 2, 3, 5, 7, 5, 8, 4, 7, 7, 2, 3, 4, 3, 3, 8, 2, 2, 7, 8, 5,
        5, 2])
----train_model(--labels---- tensor([7, 9, 8, 9, 5, 3, 6, 2, 1, 0, 9, 5, 8, 5, 0, 4, 8, 8, 5, 6, 2, 3, 5, 7,
        0, 8, 9, 8, 6, 4, 1, 1, 4, 2, 4, 2, 4, 5, 5, 1, 9, 3, 1, 8, 0, 6, 8, 7,
        8, 2])
----train_model(--labels---- tensor([1, 2, 8, 3, 0, 9, 8, 3, 9, 6, 1, 9, 0, 1, 7, 2, 5, 8, 9, 1, 8, 5, 9, 0,
        9, 6, 5, 6, 0, 5, 2, 6, 3, 4, 7, 4, 6, 8, 4, 4, 0, 2, 5, 3, 6, 4, 1, 6,
        9, 2])
----train_model(--labels---- tensor([2, 2, 3, 8, 2, 9, 9, 8, 7, 0, 5, 5, 5, 6, 4, 5, 1, 3, 7, 4, 9, 1, 9, 9,
        7, 7, 5, 5, 6, 7, 4, 2, 5, 0, 9, 1, 9, 9, 1, 2, 5, 9, 0, 6, 4, 7, 7, 3,
        1, 4])
----train_model(--labels---- tensor([0, 2, 2, 1, 3, 3, 9, 1, 3, 3, 0, 7, 1, 6, 8, 9, 2, 9, 8, 5, 7, 1, 9, 3,
        2, 2, 1, 6, 7, 6, 5, 4, 8, 6, 4, 0, 9, 0, 2, 0, 6, 7, 2, 9, 3, 3, 1, 6,
        6, 1])
----train_model(--labels---- tensor([8, 3, 6, 4, 8, 2, 0, 1, 3, 3, 5, 7, 0, 0, 5, 2, 2, 4, 8, 2, 3, 4, 9, 6,
        6, 3, 9, 4, 8, 6, 3, 2, 2, 6, 1, 4, 1, 3, 1, 3, 4, 1, 6, 5, 3, 2, 0, 5,
        3, 2])
----train_model(--labels---- tensor([9, 0, 9, 1, 5, 1, 1, 8, 5, 4, 4, 7, 0, 4, 1, 5, 0, 9, 5, 2, 3, 5, 6, 8,
        5, 3, 2, 6, 4, 9, 1, 5, 1, 1, 0, 4, 1, 9, 2, 1, 2, 9, 0, 5, 1, 2, 1, 0,
        6, 7])
----train_model(--labels---- tensor([9, 3, 8, 2, 9, 7, 9, 1, 9, 4, 8, 2, 1, 8, 9, 0, 3, 0, 7, 9, 2, 6, 3, 1,
        9, 8, 6, 8, 2, 8, 1, 3, 1, 9, 4, 3, 0, 9, 5, 2, 5, 2, 9, 8, 3, 5, 0, 3,
        0, 5])
----train_model(--labels---- tensor([3, 0, 1, 9, 9, 9, 5, 6, 1, 7, 4, 4, 9, 2, 2, 6, 9, 8, 8, 3, 8, 5, 7, 4,
        4, 5, 1, 6, 0, 8, 2, 6, 4, 7, 2, 1, 8, 5, 2, 3, 5, 1, 0, 7, 6, 1, 8, 9,
        4, 0])
----train_model(--labels---- tensor([6, 4, 4, 7, 4, 8, 3, 7, 5, 9, 6, 3, 1, 0, 8, 5, 0, 8, 6, 1, 3, 2, 6, 6,
        4, 3, 8, 5, 0, 0, 1, 7, 6, 0, 1, 4, 0, 0, 9, 1, 7, 3, 7, 3, 5, 3, 3, 4,
        6, 0])
----train_model(--labels---- tensor([8, 0, 0, 3, 7, 2, 4, 7, 5, 8, 4, 9, 8, 4, 0, 6, 6, 3, 8, 3, 6, 8, 7, 5,
        5, 2, 1, 5, 4, 6, 1, 9, 9, 4, 0, 1, 6, 1, 7, 4, 4, 8, 2, 5, 4, 2, 9, 7,
        9, 4])
----train_model(--labels---- tensor([4, 6, 2, 6, 8, 7, 8, 7, 5, 9, 8, 0, 2, 7, 5, 7, 4, 6, 5, 3, 2, 0, 7, 5,
        2, 7, 9, 3, 1, 6, 5, 4, 9, 2, 0, 7, 4, 8, 5, 1, 6, 0, 3, 7, 3, 2, 8, 9,
        1, 0])
----train_model(--labels---- tensor([8, 2, 4, 9, 3, 8, 0, 0, 4, 6, 1, 3, 0, 8, 2, 3, 2, 8, 3, 6, 8, 6, 2, 4,
        0, 7, 1, 4, 0, 8, 6, 7, 8, 9, 9, 5, 9, 0, 4, 7, 2, 3, 6, 2, 3, 5, 1, 2,
        5, 6])
----train_model(--labels---- tensor([1, 1, 2, 2, 3, 3, 5, 0, 5, 9, 8, 3, 6, 3, 7, 0, 0, 5, 4, 1, 8, 3, 1, 8,
        6, 1, 1, 4, 8, 1, 2, 4, 5, 7, 4, 7, 2, 4, 5, 9, 6, 7, 0, 0, 4, 3, 4, 5,
        2, 4])
----train_model(--labels---- tensor([8, 8, 1, 2, 6, 6, 8, 3, 8, 0, 5, 0, 9, 5, 8, 6, 7, 1, 1, 4, 1, 0, 3, 6,
        4, 6, 0, 5, 6, 1, 9, 1, 6, 3, 4, 3, 7, 4, 0, 2, 2, 8, 3, 3, 1, 9, 0, 0,
        0, 1])
----train_model(--labels---- tensor([3, 4, 2, 6, 4, 9, 4, 9, 9, 9, 4, 9, 5, 8, 4, 3, 4, 0, 8, 1, 9, 0, 5, 0,
        5, 1, 8, 6, 1, 8, 3, 9, 4, 4, 9, 0, 8, 2, 2, 2, 7, 1, 8, 6, 1, 8, 9, 2,
        6, 0])
----train_model(--labels---- tensor([3, 7, 7, 1, 8, 3, 4, 7, 5, 9, 3, 6, 5, 9, 5, 3, 2, 7, 3, 9, 5, 0, 3, 1,
        8, 6, 5, 3, 5, 4, 1, 9, 2, 7, 8, 7, 7, 2, 5, 3, 4, 2, 3, 9, 0, 4, 7, 3,
        5, 8])
----train_model(--labels---- tensor([6, 1, 7, 8, 6, 1, 7, 1, 4, 5, 2, 8, 3, 3, 3, 6, 2, 2, 7, 9, 2, 1, 1, 9,
        3, 7, 4, 4, 0, 3, 2, 2, 4, 3, 3, 6, 8, 7, 5, 4, 6, 3, 3, 2, 0, 1, 2, 0,
        1, 2])
----train_model(--labels---- tensor([0, 1, 7, 0, 5, 7, 4, 4, 0, 2, 6, 7, 1, 6, 9, 3, 4, 4, 0, 5, 2, 4, 3, 1,
        3, 8, 7, 5, 3, 0, 8, 6, 2, 0, 2, 1, 0, 7, 2, 1, 3, 1, 3, 2, 2, 9, 8, 1,
        3, 8])
----train_model(--labels---- tensor([9, 5, 1, 0, 2, 0, 0, 5, 2, 2, 7, 7, 3, 3, 7, 4, 9, 2, 0, 6, 8, 0, 0, 1,
        2, 4, 6, 5, 0, 8, 6, 5, 2, 1, 3, 2, 3, 1, 3, 0, 1, 5, 4, 8, 6, 3, 6, 3,
        2, 1])
----train_model(--labels---- tensor([3, 8, 1, 0, 9, 0, 9, 5, 3, 1, 0, 2, 2, 7, 0, 3, 6, 1, 8, 1, 0, 3, 6, 2,
        2, 7, 9, 7, 7, 2, 7, 5, 0, 8, 5, 1, 9, 3, 4, 7, 9, 3, 8, 7, 1, 2, 0, 9,
        1, 8])
----train_model(--labels---- tensor([6, 0, 9, 7, 5, 4, 6, 0, 7, 1, 4, 2, 0, 6, 5, 1, 4, 3, 3, 4, 5, 7, 3, 2,
        2, 3, 5, 4, 3, 3, 1, 1, 4, 0, 1, 1, 0, 0, 7, 3, 1, 9, 7, 9, 9, 0, 0, 3,
        7, 5])
----train_model(--labels---- tensor([5, 8, 2, 6, 9, 5, 0, 8, 6, 0, 5, 4, 1, 4, 1, 9, 2, 1, 3, 0, 4, 9, 5, 0,
        5, 9, 3, 0, 2, 9, 5, 1, 2, 3, 3, 3, 6, 9, 6, 1, 5, 7, 5, 6, 8, 0, 6, 8,
        7, 2])
----train_model(--labels---- tensor([8, 6, 5, 9, 2, 1, 3, 8, 8, 7, 8, 8, 9, 5, 3, 8, 7, 7, 3, 6, 3, 4, 8, 0,
        0, 7, 9, 4, 4, 7, 0, 1, 1, 0, 7, 3, 6, 8, 2, 0, 8, 5, 1, 6, 9, 1, 5, 1,
        1, 2])
----train_model(--labels---- tensor([8, 5, 4, 9, 0, 5, 5, 1, 8, 2, 8, 5, 0, 4, 8, 0, 8, 7, 6, 0, 5, 0, 7, 2,
        1, 9, 9, 7, 2, 8, 7, 8, 8, 5, 4, 7, 7, 4, 9, 3, 9, 1, 0, 2, 0, 0, 5, 1,
        9, 9])
----train_model(--labels---- tensor([8, 6, 6, 8, 0, 2, 8, 6, 6, 5, 8, 8, 9, 6, 9, 6, 0, 4, 3, 9, 4, 5, 3, 4,
        9, 4, 5, 1, 6, 7, 6, 7, 2, 8, 2, 9, 1, 1, 4, 5, 5, 2, 8, 2, 2, 9, 0, 8,
        6, 4])
----train_model(--labels---- tensor([3, 1, 5, 0, 5, 0, 5, 6, 9, 7, 2, 8, 7, 2, 1, 6, 7, 2, 5, 2, 5, 5, 4, 5,
        4, 7, 8, 4, 6, 4, 1, 2, 8, 2, 9, 0, 0, 8, 0, 4, 2, 9, 9, 7, 7, 5, 4, 9,
        9, 7])
----train_model(--labels---- tensor([7, 3, 3, 0, 2, 2, 3, 3, 9, 1, 5, 5, 8, 2, 9, 6, 8, 6, 6, 6, 6, 4, 6, 5,
        3, 2, 6, 9, 4, 0, 7, 4, 8, 1, 9, 1, 9, 0, 1, 4, 2, 6, 7, 3, 8, 9, 0, 7,
        6, 8])
----train_model(--labels---- tensor([7, 1, 1, 8, 0, 0, 4, 9, 8, 8, 3, 5, 9, 8, 3, 5, 1, 9, 4, 7, 1, 8, 9, 1,
        0, 7, 1, 8, 8, 5, 4, 4, 4, 4, 3, 6, 6, 4, 9, 1, 5, 8, 2, 6, 7, 3, 7, 3,
        0, 1])
----train_model(--labels---- tensor([9, 9, 7, 2, 6, 2, 1, 3, 7, 0, 9, 7, 2, 7, 8, 6, 0, 1, 3, 1, 0, 1, 8, 1,
        1, 7, 8, 9, 7, 3, 6, 9, 9, 5, 4, 3, 5, 5, 1, 5, 7, 9, 0, 7, 3, 8, 5, 4,
        8, 6])
----train_model(--labels---- tensor([2, 3, 7, 0, 4, 2, 4, 6, 0, 8, 2, 7, 5, 6, 3, 9, 1, 8, 7, 4, 2, 0, 7, 7,
        6, 5, 3, 0, 6, 9, 3, 3, 0, 8, 9, 9, 9, 2, 8, 6, 9, 3, 9, 6, 0, 0, 6, 2,
        4, 4])
----train_model(--labels---- tensor([3, 5, 5, 8, 5, 6, 7, 3, 5, 7, 1, 7, 2, 2, 5, 3, 0, 6, 9, 7, 9, 3, 8, 3,
        0, 8, 4, 1, 5, 8, 5, 6, 1, 1, 0, 9, 3, 1, 2, 1, 3, 7, 5, 9, 3, 7, 6, 1,
        5, 6])
----train_model(--labels---- tensor([0, 9, 7, 9, 5, 8, 4, 1, 4, 4, 2, 5, 0, 6, 1, 2, 0, 7, 7, 9, 2, 2, 1, 2,
        1, 5, 0, 4, 2, 2, 8, 4, 7, 2, 6, 5, 5, 1, 2, 0, 2, 4, 7, 4, 4, 7, 5, 7,
        9, 8])
----train_model(--labels---- tensor([4, 5, 4, 9, 4, 9, 1, 9, 5, 7, 1, 8, 1, 3, 4, 2, 0, 6, 9, 2, 5, 6, 2, 4,
        7, 6, 2, 0, 7, 5, 5, 3, 2, 8, 1, 9, 5, 7, 0, 4, 2, 0, 0, 2, 1, 1, 2, 5,
        8, 1])
----train_model(--labels---- tensor([7, 5, 1, 8, 4, 6, 3, 3, 6, 9, 3, 4, 5, 1, 4, 5, 0, 1, 1, 8, 9, 6, 9, 1,
        3, 6, 6, 5, 5, 6, 0, 5, 3, 2, 1, 8, 0, 1, 5, 9, 3, 9, 7, 6, 6, 3, 1, 3,
        8, 9])
----train_model(--labels---- tensor([7, 7, 1, 7, 2, 6, 4, 0, 0, 9, 6, 4, 2, 0, 5, 6, 6, 3, 1, 5, 0, 0, 9, 9,
        7, 7, 8, 9, 9, 5, 5, 4, 5, 3, 8, 4, 5, 3, 1, 4, 6, 4, 9, 5, 3, 7, 2, 5,
        3, 9])
