----             ImageID  Source LabelName  ...  XClick2Y  XClick3Y  XClick4Y
0  0000599864fd15b3  xclick       Bus  ...  0.512700  0.650047  0.457197
1  00006bdb1eb5cd74  xclick     Truck  ...  0.241855  0.352130  0.437343
2  00006bdb1eb5cd74  xclick     Truck  ...  0.398496  0.409774  0.295739
3  00010bf498b64bab  xclick       Bus  ...  0.493882  0.705228  0.521691
4  00013f14dd4e168f  xclick       Bus  ...  0.303940  0.999062  0.523452

[5 rows x 21 columns]
-label2target---
 {'Bus': 1, 'Truck': 2}
-label2target---
 {'Bus': 1, 'Truck': 2, 'background': 0}
-target2label---
 {1: 'Bus', 2: 'Truck', 0: 'background'}
----len(trn_df)---- 21598
----len(val_df)---- 2464
----type(train_ds)---- <class '__main__.OpenDataset'>
----type(train_loader)---- <class 'torch.utils.data.dataloader.DataLoader'>
----get_model--- FasterRCNN(
  (transform): GeneralizedRCNNTransform(
      Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
      Resize(min_size=(800,), max_size=1333, mode='bilinear')
  )
  (backbone): BackboneWithFPN(
    (body): IntermediateLayerGetter(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (bn1): FrozenBatchNorm2d(64)
      (relu): ReLU(inplace=True)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(64)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(64)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(256)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): FrozenBatchNorm2d(256)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(64)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(64)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(256)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(64)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(64)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(256)
          (relu): ReLU(inplace=True)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(128)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(128)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(512)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): FrozenBatchNorm2d(512)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(128)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(128)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(512)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(128)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(128)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(512)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(128)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(128)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(512)
          (relu): ReLU(inplace=True)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(256)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(256)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(1024)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): FrozenBatchNorm2d(1024)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(256)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(256)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(1024)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(256)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(256)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(1024)
          (relu): ReLU(inplace=True)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(256)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(256)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(1024)
          (relu): ReLU(inplace=True)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(256)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(256)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(1024)
          (relu): ReLU(inplace=True)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(256)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(256)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(1024)
          (relu): ReLU(inplace=True)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(512)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(512)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(2048)
          (relu): ReLU(inplace=True)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
            (1): FrozenBatchNorm2d(2048)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(512)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(512)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(2048)
          (relu): ReLU(inplace=True)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): FrozenBatchNorm2d(512)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): FrozenBatchNorm2d(512)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): FrozenBatchNorm2d(2048)
          (relu): ReLU(inplace=True)
        )
      )
    )
    (fpn): FeaturePyramidNetwork(
      (inner_blocks): ModuleList(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (2): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
        (3): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (layer_blocks): ModuleList(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (extra_blocks): LastLevelMaxPool()
    )
  )
  (rpn): RegionProposalNetwork(
    (anchor_generator): AnchorGenerator()
    (head): RPNHead(
      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (cls_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))
      (bbox_pred): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (roi_heads): RoIHeads(
    (box_roi_pool): MultiScaleRoIAlign()
    (box_head): TwoMLPHead(
      (fc6): Linear(in_features=12544, out_features=1024, bias=True)
      (fc7): Linear(in_features=1024, out_features=1024, bias=True)
    )
    (box_predictor): FastRCNNPredictor(
      (cls_score): Linear(in_features=1024, out_features=3, bias=True)
      (bbox_pred): Linear(in_features=1024, out_features=12, bias=True)
    )
  )
)
----type(optimizer--aaaa--- <class 'torch.optim.sgd.SGD'>
--log-- <torch_snippets.torch_loader.Report object at 0x7f61f4592c40>
---__getitem__----df_init_labels.head()-----             ImageID  Source LabelName  ...  XClick2Y  XClick3Y  XClick4Y
0  0000599864fd15b3  xclick       Bus  ...  0.512700  0.650047  0.457197
1  00006bdb1eb5cd74  xclick     Truck  ...  0.241855  0.352130  0.437343
2  00006bdb1eb5cd74  xclick     Truck  ...  0.398496  0.409774  0.295739
3  00010bf498b64bab  xclick       Bus  ...  0.493882  0.705228  0.521691
4  00013f14dd4e168f  xclick       Bus  ...  0.303940  0.999062  0.523452

[5 rows x 21 columns]
----foobar----len(boxes 1
--------target-- {'boxes': tensor([[ 77.,  34., 203., 145.]]), 'labels': tensor([1])}
---__getitem__----df_init_labels.head()-----             ImageID  Source LabelName  ...  XClick2Y  XClick3Y  XClick4Y
0  0000599864fd15b3  xclick       Bus  ...  0.512700  0.650047  0.457197
1  00006bdb1eb5cd74  xclick     Truck  ...  0.241855  0.352130  0.437343
2  00006bdb1eb5cd74  xclick     Truck  ...  0.398496  0.409774  0.295739
3  00010bf498b64bab  xclick       Bus  ...  0.493882  0.705228  0.521691
4  00013f14dd4e168f  xclick       Bus  ...  0.303940  0.999062  0.523452

[5 rows x 21 columns]
----foobar----len(boxes 2
--------target-- {'boxes': tensor([[ 61.,  31., 156.,  97.],
        [157.,  45., 223.,  91.]]), 'labels': tensor([2, 2])}
---__getitem__----df_init_labels.head()-----             ImageID  Source LabelName  ...  XClick2Y  XClick3Y  XClick4Y
0  0000599864fd15b3  xclick       Bus  ...  0.512700  0.650047  0.457197
1  00006bdb1eb5cd74  xclick     Truck  ...  0.241855  0.352130  0.437343
2  00006bdb1eb5cd74  xclick     Truck  ...  0.398496  0.409774  0.295739
3  00010bf498b64bab  xclick       Bus  ...  0.493882  0.705228  0.521691
4  00013f14dd4e168f  xclick       Bus  ...  0.303940  0.999062  0.523452

[5 rows x 21 columns]
----foobar----len(boxes 1
--------target-- {'boxes': tensor([[ 35.,  60.,  83., 157.]]), 'labels': tensor([1])}
---__getitem__----df_init_labels.head()-----             ImageID  Source LabelName  ...  XClick2Y  XClick3Y  XClick4Y
0  0000599864fd15b3  xclick       Bus  ...  0.512700  0.650047  0.457197
1  00006bdb1eb5cd74  xclick     Truck  ...  0.241855  0.352130  0.437343
2  00006bdb1eb5cd74  xclick     Truck  ...  0.398496  0.409774  0.295739
3  00010bf498b64bab  xclick       Bus  ...  0.493882  0.705228  0.521691
4  00013f14dd4e168f  xclick       Bus  ...  0.303940  0.999062  0.523452

[5 rows x 21 columns]
----foobar----len(boxes 1
--------target-- {'boxes': tensor([[ 64.,  43., 223., 223.]]), 'labels': tensor([1])}
----train_loader--->>-- type(inputs <class 'tuple'>
----train_loader--->>-- inputs...
 ((tensor([[[0.3098, 0.3451, 0.3765,  ..., 0.3529, 0.3216, 0.4431],
         [0.3059, 0.3176, 0.3373,  ..., 0.3529, 0.3412, 0.4471],
         [0.2941, 0.2902, 0.3059,  ..., 0.3529, 0.3608, 0.4471],
         ...,
         [0.4196, 0.4157, 0.4314,  ..., 0.6510, 0.6235, 0.5725],
         [0.4353, 0.4275, 0.4510,  ..., 0.6627, 0.6431, 0.6157],
         [0.4588, 0.4588, 0.4784,  ..., 0.6902, 0.6549, 0.6392]],

        [[0.3490, 0.3686, 0.3804,  ..., 0.3333, 0.3176, 0.4588],
         [0.3333, 0.3373, 0.3490,  ..., 0.3333, 0.3412, 0.4667],
         [0.3098, 0.3020, 0.3137,  ..., 0.3333, 0.3608, 0.4667],
         ...,
         [0.4000, 0.4039, 0.4196,  ..., 0.6235, 0.5961, 0.5451],
         [0.4157, 0.4157, 0.4392,  ..., 0.6392, 0.6196, 0.5922],
         [0.4392, 0.4471, 0.4667,  ..., 0.6667, 0.6314, 0.6157]],

        [[0.3137, 0.3373, 0.3647,  ..., 0.3569, 0.3294, 0.4745],
         [0.3176, 0.3216, 0.3412,  ..., 0.3490, 0.3451, 0.4784],
         [0.3176, 0.3098, 0.3216,  ..., 0.3451, 0.3608, 0.4706],
         ...,
         [0.3843, 0.3843, 0.4000,  ..., 0.5765, 0.5490, 0.4980],
         [0.4000, 0.3961, 0.4196,  ..., 0.5922, 0.5725, 0.5451],
         [0.4235, 0.4275, 0.4471,  ..., 0.6196, 0.5843, 0.5686]]],
       device='cuda:0'), tensor([[[0.6510, 0.6667, 0.6667,  ..., 0.7294, 0.7176, 0.4824],
         [0.6471, 0.6627, 0.6706,  ..., 0.7255, 0.7137, 0.4157],
         [0.6431, 0.6588, 0.6706,  ..., 0.7098, 0.6902, 0.3294],
         ...,
         [0.2510, 0.2706, 0.2706,  ..., 0.2863, 0.2353, 0.2431],
         [0.2353, 0.2667, 0.2745,  ..., 0.2706, 0.2235, 0.2431],
         [0.2431, 0.2745, 0.2667,  ..., 0.2510, 0.2353, 0.2392]],

        [[0.6706, 0.6863, 0.6902,  ..., 0.7412, 0.7255, 0.4902],
         [0.6667, 0.6824, 0.6980,  ..., 0.7373, 0.7255, 0.4275],
         [0.6667, 0.6824, 0.7020,  ..., 0.7294, 0.7098, 0.3529],
         ...,
         [0.2471, 0.2667, 0.2667,  ..., 0.2784, 0.2275, 0.2392],
         [0.2314, 0.2627, 0.2706,  ..., 0.2627, 0.2196, 0.2392],
         [0.2392, 0.2706, 0.2627,  ..., 0.2471, 0.2314, 0.2353]],

        [[0.6863, 0.7020, 0.7059,  ..., 0.7725, 0.7725, 0.5373],
         [0.6824, 0.6980, 0.7098,  ..., 0.7765, 0.7686, 0.4745],
         [0.6824, 0.6980, 0.7137,  ..., 0.7686, 0.7529, 0.4000],
         ...,
         [0.2314, 0.2510, 0.2510,  ..., 0.2588, 0.2118, 0.2235],
         [0.2157, 0.2471, 0.2549,  ..., 0.2471, 0.2039, 0.2235],
         [0.2235, 0.2549, 0.2471,  ..., 0.2314, 0.2157, 0.2196]]],
       device='cuda:0'), tensor([[[0.2863, 0.4353, 0.6980,  ..., 0.2549, 0.2627, 0.2392],
         [0.3176, 0.4510, 0.7020,  ..., 0.2431, 0.2510, 0.2392],
         [0.3608, 0.4745, 0.7059,  ..., 0.2275, 0.2353, 0.2353],
         ...,
         [0.2980, 0.2588, 0.2667,  ..., 0.1922, 0.1961, 0.2157],
         [0.3137, 0.2431, 0.2392,  ..., 0.2118, 0.2000, 0.2196],
         [0.3255, 0.2235, 0.2157,  ..., 0.2314, 0.2000, 0.2235]],

        [[0.3922, 0.4235, 0.6039,  ..., 0.1725, 0.1804, 0.1569],
         [0.4078, 0.4314, 0.6118,  ..., 0.1608, 0.1686, 0.1569],
         [0.4275, 0.4431, 0.6196,  ..., 0.1490, 0.1529, 0.1569],
         ...,
         [0.5529, 0.5176, 0.5020,  ..., 0.1137, 0.1176, 0.1373],
         [0.5451, 0.4863, 0.4588,  ..., 0.1333, 0.1216, 0.1412],
         [0.5373, 0.4549, 0.4235,  ..., 0.1529, 0.1216, 0.1451]],

        [[0.4471, 0.2314, 0.2588,  ..., 0.0510, 0.0627, 0.0431],
         [0.4510, 0.2549, 0.3059,  ..., 0.0392, 0.0510, 0.0431],
         [0.4588, 0.2902, 0.3569,  ..., 0.0275, 0.0353, 0.0392],
         ...,
         [0.5490, 0.4980, 0.4706,  ..., 0.0118, 0.0196, 0.0431],
         [0.5490, 0.4706, 0.4314,  ..., 0.0314, 0.0235, 0.0471],
         [0.5490, 0.4431, 0.3961,  ..., 0.0510, 0.0275, 0.0510]]],
       device='cuda:0'), tensor([[[0.6863, 0.6627, 0.5373,  ..., 0.8275, 0.9412, 0.9255],
         [0.6902, 0.6706, 0.5490,  ..., 0.8392, 0.8471, 0.9490],
         [0.6980, 0.6784, 0.5725,  ..., 0.8431, 0.7725, 0.9569],
         ...,
         [0.4627, 0.6000, 0.6510,  ..., 0.7725, 0.7608, 0.7686],
         [0.4392, 0.6000, 0.6235,  ..., 0.7922, 0.7804, 0.7882],
         [0.4275, 0.6157, 0.5765,  ..., 0.7961, 0.7843, 0.7922]],

        [[0.6667, 0.6157, 0.4667,  ..., 0.1765, 0.5765, 0.8745],
         [0.6706, 0.6235, 0.4784,  ..., 0.1725, 0.4392, 0.8196],
         [0.6745, 0.6314, 0.4941,  ..., 0.1608, 0.3020, 0.7490],
         ...,
         [0.5137, 0.6314, 0.6667,  ..., 0.2157, 0.2039, 0.1922],
         [0.5059, 0.6431, 0.6431,  ..., 0.2118, 0.2000, 0.1882],
         [0.5098, 0.6706, 0.6000,  ..., 0.2118, 0.1961, 0.1922]],

        [[0.6275, 0.5882, 0.4353,  ..., 0.3059, 0.6510, 0.8784],
         [0.6314, 0.6000, 0.4431,  ..., 0.2980, 0.5176, 0.8392],
         [0.6353, 0.6078, 0.4627,  ..., 0.2784, 0.3882, 0.7961],
         ...,
         [0.5255, 0.6510, 0.7020,  ..., 0.1804, 0.1647, 0.1647],
         [0.5137, 0.6510, 0.6588,  ..., 0.1765, 0.1608, 0.1569],
         [0.5020, 0.6667, 0.5961,  ..., 0.1804, 0.1569, 0.1608]]],
       device='cuda:0')), ({'boxes': tensor([[ 77.,  34., 203., 145.]]), 'labels': tensor([1])}, {'boxes': tensor([[ 61.,  31., 156.,  97.],
        [157.,  45., 223.,  91.]]), 'labels': tensor([2, 2])}, {'boxes': tensor([[ 35.,  60.,  83., 157.]]), 'labels': tensor([1])}, {'boxes': tensor([[ 64.,  43., 223., 223.]]), 'labels': tensor([1])}))
----train_loader--->>-- inputs[0]...
 (tensor([[[0.3098, 0.3451, 0.3765,  ..., 0.3529, 0.3216, 0.4431],
         [0.3059, 0.3176, 0.3373,  ..., 0.3529, 0.3412, 0.4471],
         [0.2941, 0.2902, 0.3059,  ..., 0.3529, 0.3608, 0.4471],
         ...,
         [0.4196, 0.4157, 0.4314,  ..., 0.6510, 0.6235, 0.5725],
         [0.4353, 0.4275, 0.4510,  ..., 0.6627, 0.6431, 0.6157],
         [0.4588, 0.4588, 0.4784,  ..., 0.6902, 0.6549, 0.6392]],

        [[0.3490, 0.3686, 0.3804,  ..., 0.3333, 0.3176, 0.4588],
         [0.3333, 0.3373, 0.3490,  ..., 0.3333, 0.3412, 0.4667],
         [0.3098, 0.3020, 0.3137,  ..., 0.3333, 0.3608, 0.4667],
         ...,
         [0.4000, 0.4039, 0.4196,  ..., 0.6235, 0.5961, 0.5451],
         [0.4157, 0.4157, 0.4392,  ..., 0.6392, 0.6196, 0.5922],
         [0.4392, 0.4471, 0.4667,  ..., 0.6667, 0.6314, 0.6157]],

        [[0.3137, 0.3373, 0.3647,  ..., 0.3569, 0.3294, 0.4745],
         [0.3176, 0.3216, 0.3412,  ..., 0.3490, 0.3451, 0.4784],
         [0.3176, 0.3098, 0.3216,  ..., 0.3451, 0.3608, 0.4706],
         ...,
         [0.3843, 0.3843, 0.4000,  ..., 0.5765, 0.5490, 0.4980],
         [0.4000, 0.3961, 0.4196,  ..., 0.5922, 0.5725, 0.5451],
         [0.4235, 0.4275, 0.4471,  ..., 0.6196, 0.5843, 0.5686]]],
       device='cuda:0'), tensor([[[0.6510, 0.6667, 0.6667,  ..., 0.7294, 0.7176, 0.4824],
         [0.6471, 0.6627, 0.6706,  ..., 0.7255, 0.7137, 0.4157],
         [0.6431, 0.6588, 0.6706,  ..., 0.7098, 0.6902, 0.3294],
         ...,
         [0.2510, 0.2706, 0.2706,  ..., 0.2863, 0.2353, 0.2431],
         [0.2353, 0.2667, 0.2745,  ..., 0.2706, 0.2235, 0.2431],
         [0.2431, 0.2745, 0.2667,  ..., 0.2510, 0.2353, 0.2392]],

        [[0.6706, 0.6863, 0.6902,  ..., 0.7412, 0.7255, 0.4902],
         [0.6667, 0.6824, 0.6980,  ..., 0.7373, 0.7255, 0.4275],
         [0.6667, 0.6824, 0.7020,  ..., 0.7294, 0.7098, 0.3529],
         ...,
         [0.2471, 0.2667, 0.2667,  ..., 0.2784, 0.2275, 0.2392],
         [0.2314, 0.2627, 0.2706,  ..., 0.2627, 0.2196, 0.2392],
         [0.2392, 0.2706, 0.2627,  ..., 0.2471, 0.2314, 0.2353]],

        [[0.6863, 0.7020, 0.7059,  ..., 0.7725, 0.7725, 0.5373],
         [0.6824, 0.6980, 0.7098,  ..., 0.7765, 0.7686, 0.4745],
         [0.6824, 0.6980, 0.7137,  ..., 0.7686, 0.7529, 0.4000],
         ...,
         [0.2314, 0.2510, 0.2510,  ..., 0.2588, 0.2118, 0.2235],
         [0.2157, 0.2471, 0.2549,  ..., 0.2471, 0.2039, 0.2235],
         [0.2235, 0.2549, 0.2471,  ..., 0.2314, 0.2157, 0.2196]]],
       device='cuda:0'), tensor([[[0.2863, 0.4353, 0.6980,  ..., 0.2549, 0.2627, 0.2392],
         [0.3176, 0.4510, 0.7020,  ..., 0.2431, 0.2510, 0.2392],
         [0.3608, 0.4745, 0.7059,  ..., 0.2275, 0.2353, 0.2353],
         ...,
         [0.2980, 0.2588, 0.2667,  ..., 0.1922, 0.1961, 0.2157],
         [0.3137, 0.2431, 0.2392,  ..., 0.2118, 0.2000, 0.2196],
         [0.3255, 0.2235, 0.2157,  ..., 0.2314, 0.2000, 0.2235]],

        [[0.3922, 0.4235, 0.6039,  ..., 0.1725, 0.1804, 0.1569],
         [0.4078, 0.4314, 0.6118,  ..., 0.1608, 0.1686, 0.1569],
         [0.4275, 0.4431, 0.6196,  ..., 0.1490, 0.1529, 0.1569],
         ...,
         [0.5529, 0.5176, 0.5020,  ..., 0.1137, 0.1176, 0.1373],
         [0.5451, 0.4863, 0.4588,  ..., 0.1333, 0.1216, 0.1412],
         [0.5373, 0.4549, 0.4235,  ..., 0.1529, 0.1216, 0.1451]],

        [[0.4471, 0.2314, 0.2588,  ..., 0.0510, 0.0627, 0.0431],
         [0.4510, 0.2549, 0.3059,  ..., 0.0392, 0.0510, 0.0431],
         [0.4588, 0.2902, 0.3569,  ..., 0.0275, 0.0353, 0.0392],
         ...,
         [0.5490, 0.4980, 0.4706,  ..., 0.0118, 0.0196, 0.0431],
         [0.5490, 0.4706, 0.4314,  ..., 0.0314, 0.0235, 0.0471],
         [0.5490, 0.4431, 0.3961,  ..., 0.0510, 0.0275, 0.0510]]],
       device='cuda:0'), tensor([[[0.6863, 0.6627, 0.5373,  ..., 0.8275, 0.9412, 0.9255],
         [0.6902, 0.6706, 0.5490,  ..., 0.8392, 0.8471, 0.9490],
         [0.6980, 0.6784, 0.5725,  ..., 0.8431, 0.7725, 0.9569],
         ...,
         [0.4627, 0.6000, 0.6510,  ..., 0.7725, 0.7608, 0.7686],
         [0.4392, 0.6000, 0.6235,  ..., 0.7922, 0.7804, 0.7882],
         [0.4275, 0.6157, 0.5765,  ..., 0.7961, 0.7843, 0.7922]],

        [[0.6667, 0.6157, 0.4667,  ..., 0.1765, 0.5765, 0.8745],
         [0.6706, 0.6235, 0.4784,  ..., 0.1725, 0.4392, 0.8196],
         [0.6745, 0.6314, 0.4941,  ..., 0.1608, 0.3020, 0.7490],
         ...,
         [0.5137, 0.6314, 0.6667,  ..., 0.2157, 0.2039, 0.1922],
         [0.5059, 0.6431, 0.6431,  ..., 0.2118, 0.2000, 0.1882],
         [0.5098, 0.6706, 0.6000,  ..., 0.2118, 0.1961, 0.1922]],

        [[0.6275, 0.5882, 0.4353,  ..., 0.3059, 0.6510, 0.8784],
         [0.6314, 0.6000, 0.4431,  ..., 0.2980, 0.5176, 0.8392],
         [0.6353, 0.6078, 0.4627,  ..., 0.2784, 0.3882, 0.7961],
         ...,
         [0.5255, 0.6510, 0.7020,  ..., 0.1804, 0.1647, 0.1647],
         [0.5137, 0.6510, 0.6588,  ..., 0.1765, 0.1608, 0.1569],
         [0.5020, 0.6667, 0.5961,  ..., 0.1804, 0.1569, 0.1608]]],
       device='cuda:0'))
----train_loader--->>-- inputs[1]...
 ({'boxes': tensor([[ 77.,  34., 203., 145.]]), 'labels': tensor([1])}, {'boxes': tensor([[ 61.,  31., 156.,  97.],
        [157.,  45., 223.,  91.]]), 'labels': tensor([2, 2])}, {'boxes': tensor([[ 35.,  60.,  83., 157.]]), 'labels': tensor([1])}, {'boxes': tensor([[ 64.,  43., 223., 223.]]), 'labels': tensor([1])})
-----------type(optimizer----bbb---- <class 'torch.optim.sgd.SGD'>
-----------type(optimizer----cccc---- <class 'torch.optim.sgd.SGD'>
EPOCH: 0.000	trn_loss: 1.437	trn_loc_loss: 1.202	trn_regr_loss: 0.192	trn_objectness_loss: 0.040	trn_rpn_box_reg_loss: 0.004	(1.88s - 12899.27s remaining)---__getitem__----df_init_labels.head()-----             ImageID  Source LabelName  ...  XClick2Y  XClick3Y  XClick4Y
0  0000599864fd15b3  xclick       Bus  ...  0.512700  0.650047  0.457197
1  00006bdb1eb5cd74  xclick     Truck  ...  0.241855  0.352130  0.437343
2  00006bdb1eb5cd74  xclick     Truck  ...  0.398496  0.409774  0.295739
3  00010bf498b64bab  xclick       Bus  ...  0.493882  0.705228  0.521691
4  00013f14dd4e168f  xclick       Bus  ...  0.303940  0.999062  0.523452

[5 rows x 21 columns]
----foobar----len(boxes 1
--------target-- {'boxes': tensor([[ 13.,  28., 216., 218.]]), 'labels': tensor([2])}
---__getitem__----df_init_labels.head()-----             ImageID  Source LabelName  ...  XClick2Y  XClick3Y  XClick4Y
0  0000599864fd15b3  xclick       Bus  ...  0.512700  0.650047  0.457197
1  00006bdb1eb5cd74  xclick     Truck  ...  0.241855  0.352130  0.437343
2  00006bdb1eb5cd74  xclick     Truck  ...  0.398496  0.409774  0.295739
3  00010bf498b64bab  xclick       Bus  ...  0.493882  0.705228  0.521691
4  00013f14dd4e168f  xclick       Bus  ...  0.303940  0.999062  0.523452

[5 rows x 21 columns]
----foobar----len(boxes 1
--------target-- {'boxes': tensor([[ 13.,  11., 220., 210.]]), 'labels': tensor([2])}
---__getitem__----df_init_labels.head()-----             ImageID  Source LabelName  ...  XClick2Y  XClick3Y  XClick4Y
0  0000599864fd15b3  xclick       Bus  ...  0.512700  0.650047  0.457197
1  00006bdb1eb5cd74  xclick     Truck  ...  0.241855  0.352130  0.437343
2  00006bdb1eb5cd74  xclick     Truck  ...  0.398496  0.409774  0.295739
3  00010bf498b64bab  xclick       Bus  ...  0.493882  0.705228  0.521691
4  00013f14dd4e168f  xclick       Bus  ...  0.303940  0.999062  0.523452

[5 rows x 21 columns]
----foobar----len(boxes 3
--------target-- {'boxes': tensor([[  7.,  42.,  42.,  71.],
        [ 21.,  32., 201., 209.],
        [192.,  55., 223.,  87.]]), 'labels': tensor([2, 2, 2])}
---__getitem__----df_init_labels.head()-----             ImageID  Source LabelName  ...  XClick2Y  XClick3Y  XClick4Y
0  0000599864fd15b3  xclick       Bus  ...  0.512700  0.650047  0.457197
1  00006bdb1eb5cd74  xclick     Truck  ...  0.241855  0.352130  0.437343
2  00006bdb1eb5cd74  xclick     Truck  ...  0.398496  0.409774  0.295739
3  00010bf498b64bab  xclick       Bus  ...  0.493882  0.705228  0.521691
4  00013f14dd4e168f  xclick       Bus  ...  0.303940  0.999062  0.523452

[5 rows x 21 columns]
----foobar----len(boxes 1
--------target-- {'boxes': tensor([[  0.,  42., 156., 223.]]), 'labels': tensor([2])}
----train_loader--->>-- type(inputs <class 'tuple'>
----train_loader--->>-- inputs...
 ((tensor([[[0.9608, 0.9608, 0.9608,  ..., 0.5686, 0.3137, 0.4980],
         [0.9608, 0.9647, 0.9608,  ..., 0.5255, 0.3490, 0.5216],
         [0.9608, 0.9647, 0.9608,  ..., 0.5137, 0.3961, 0.5333],
         ...,
         [0.9294, 0.8588, 0.8431,  ..., 0.9804, 0.9725, 0.9686],
         [0.9412, 0.9373, 0.9412,  ..., 0.9804, 0.9725, 0.9725],
         [0.9373, 0.9294, 0.9373,  ..., 0.9804, 0.9765, 0.9765]],

        [[0.9608, 0.9608, 0.9608,  ..., 0.5686, 0.3137, 0.4980],
         [0.9608, 0.9647, 0.9608,  ..., 0.5255, 0.3490, 0.5216],
         [0.9608, 0.9647, 0.9608,  ..., 0.5137, 0.3961, 0.5333],
         ...,
         [0.9294, 0.8588, 0.8431,  ..., 0.9804, 0.9725, 0.9686],
         [0.9412, 0.9373, 0.9412,  ..., 0.9804, 0.9725, 0.9725],
         [0.9373, 0.9294, 0.9373,  ..., 0.9804, 0.9765, 0.9765]],

        [[0.9608, 0.9608, 0.9608,  ..., 0.5686, 0.3137, 0.4980],
         [0.9608, 0.9647, 0.9608,  ..., 0.5255, 0.3490, 0.5216],
         [0.9608, 0.9647, 0.9608,  ..., 0.5137, 0.3961, 0.5333],
         ...,
         [0.9294, 0.8588, 0.8431,  ..., 0.9804, 0.9725, 0.9686],
         [0.9412, 0.9373, 0.9412,  ..., 0.9804, 0.9725, 0.9725],
         [0.9373, 0.9294, 0.9373,  ..., 0.9804, 0.9765, 0.9765]]],
       device='cuda:0'), tensor([[[0.9647, 0.9765, 0.9882,  ..., 0.8824, 0.9333, 0.9569],
         [0.9725, 0.9804, 0.9882,  ..., 0.8275, 0.8196, 0.8314],
         [0.9843, 0.9882, 0.9922,  ..., 0.7490, 0.6902, 0.6941],
         ...,
         [0.9922, 0.9882, 0.9882,  ..., 1.0000, 1.0000, 0.9922],
         [0.9961, 0.9804, 0.9725,  ..., 0.9961, 0.9961, 0.9961],
         [0.9961, 0.9765, 0.9608,  ..., 0.9922, 0.9961, 1.0000]],

        [[0.9765, 0.9882, 0.9961,  ..., 0.2627, 0.2275, 0.1765],
         [0.9804, 0.9882, 0.9961,  ..., 0.2667, 0.2235, 0.2000],
         [0.9882, 0.9922, 0.9961,  ..., 0.2745, 0.2431, 0.2667],
         ...,
         [0.9843, 0.9843, 0.9843,  ..., 0.9922, 0.9961, 0.9882],
         [0.9882, 0.9765, 0.9686,  ..., 0.9882, 0.9922, 0.9922],
         [0.9882, 0.9686, 0.9569,  ..., 0.9843, 0.9922, 0.9961]],

        [[0.9922, 1.0000, 1.0000,  ..., 0.3333, 0.3020, 0.2667],
         [0.9961, 1.0000, 1.0000,  ..., 0.3412, 0.3020, 0.2824],
         [1.0000, 1.0000, 1.0000,  ..., 0.3608, 0.3216, 0.3412],
         ...,
         [0.9843, 0.9765, 0.9765,  ..., 1.0000, 1.0000, 0.9961],
         [0.9882, 0.9725, 0.9647,  ..., 0.9961, 1.0000, 1.0000],
         [0.9922, 0.9725, 0.9569,  ..., 0.9961, 1.0000, 1.0000]]],
       device='cuda:0'), tensor([[[1.0000, 0.9961, 0.9922,  ..., 1.0000, 1.0000, 1.0000],
         [0.9961, 0.9922, 0.9843,  ..., 1.0000, 1.0000, 1.0000],
         [0.9961, 0.9882, 0.9765,  ..., 1.0000, 1.0000, 1.0000],
         ...,
         [0.2196, 0.1961, 0.2275,  ..., 0.3216, 0.3647, 0.2902],
         [0.2706, 0.2510, 0.2196,  ..., 0.2980, 0.3412, 0.2941],
         [0.2471, 0.2275, 0.2471,  ..., 0.3176, 0.3098, 0.3333]],

        [[1.0000, 0.9961, 0.9961,  ..., 1.0000, 1.0000, 1.0000],
         [0.9961, 0.9922, 0.9922,  ..., 1.0000, 1.0000, 1.0000],
         [1.0000, 0.9922, 0.9843,  ..., 1.0000, 1.0000, 1.0000],
         ...,
         [0.2039, 0.1765, 0.2118,  ..., 0.2941, 0.3373, 0.2627],
         [0.2549, 0.2314, 0.2000,  ..., 0.2706, 0.3137, 0.2706],
         [0.2196, 0.2078, 0.2275,  ..., 0.3020, 0.2980, 0.3294]],

        [[0.9922, 0.9882, 0.9961,  ..., 1.0000, 1.0000, 1.0000],
         [0.9882, 0.9882, 0.9922,  ..., 1.0000, 1.0000, 1.0000],
         [0.9961, 0.9922, 0.9843,  ..., 1.0000, 1.0000, 1.0000],
         ...,
         [0.1686, 0.1529, 0.1882,  ..., 0.2706, 0.3137, 0.2392],
         [0.2235, 0.2078, 0.1804,  ..., 0.2471, 0.2902, 0.2471],
         [0.1922, 0.1843, 0.2078,  ..., 0.2706, 0.2667, 0.3098]]],
       device='cuda:0'), tensor([[[0.0275, 0.0275, 0.0667,  ..., 0.0588, 0.1059, 0.0941],
         [0.0392, 0.0549, 0.0784,  ..., 0.0980, 0.1098, 0.0941],
         [0.0471, 0.0824, 0.0902,  ..., 0.1412, 0.1098, 0.0902],
         ...,
         [0.4941, 0.4157, 0.3686,  ..., 0.6745, 0.6824, 0.6706],
         [0.5137, 0.4275, 0.3804,  ..., 0.6588, 0.6745, 0.6706],
         [0.5255, 0.4314, 0.4000,  ..., 0.6471, 0.6706, 0.6706]],

        [[0.0392, 0.0392, 0.0784,  ..., 0.1922, 0.2353, 0.1922],
         [0.0510, 0.0667, 0.0902,  ..., 0.2235, 0.2314, 0.1882],
         [0.0588, 0.0941, 0.0980,  ..., 0.2549, 0.2196, 0.1765],
         ...,
         [0.3569, 0.2824, 0.2392,  ..., 0.7176, 0.7255, 0.7137],
         [0.3686, 0.2824, 0.2431,  ..., 0.7020, 0.7176, 0.7137],
         [0.3725, 0.2824, 0.2549,  ..., 0.6902, 0.7137, 0.7137]],

        [[0.0078, 0.0157, 0.0392,  ..., 0.0392, 0.0824, 0.0235],
         [0.0157, 0.0353, 0.0471,  ..., 0.0745, 0.0824, 0.0275],
         [0.0235, 0.0549, 0.0549,  ..., 0.1137, 0.0824, 0.0353],
         ...,
         [0.0745, 0.0314, 0.0392,  ..., 0.7961, 0.8039, 0.7922],
         [0.0510, 0.0118, 0.0235,  ..., 0.7804, 0.7961, 0.7922],
         [0.0314, 0.0000, 0.0235,  ..., 0.7647, 0.7922, 0.7922]]],
       device='cuda:0')), ({'boxes': tensor([[ 13.,  28., 216., 218.]]), 'labels': tensor([2])}, {'boxes': tensor([[ 13.,  11., 220., 210.]]), 'labels': tensor([2])}, {'boxes': tensor([[  7.,  42.,  42.,  71.],
        [ 21.,  32., 201., 209.],
        [192.,  55., 223.,  87.]]), 'labels': tensor([2, 2, 2])}, {'boxes': tensor([[  0.,  42., 156., 223.]]), 'labels': tensor([2])}))
----train_loader--->>-- inputs[0]...
 (tensor([[[0.9608, 0.9608, 0.9608,  ..., 0.5686, 0.3137, 0.4980],
         [0.9608, 0.9647, 0.9608,  ..., 0.5255, 0.3490, 0.5216],
         [0.9608, 0.9647, 0.9608,  ..., 0.5137, 0.3961, 0.5333],
         ...,
         [0.9294, 0.8588, 0.8431,  ..., 0.9804, 0.9725, 0.9686],
         [0.9412, 0.9373, 0.9412,  ..., 0.9804, 0.9725, 0.9725],
         [0.9373, 0.9294, 0.9373,  ..., 0.9804, 0.9765, 0.9765]],

        [[0.9608, 0.9608, 0.9608,  ..., 0.5686, 0.3137, 0.4980],
         [0.9608, 0.9647, 0.9608,  ..., 0.5255, 0.3490, 0.5216],
         [0.9608, 0.9647, 0.9608,  ..., 0.5137, 0.3961, 0.5333],
         ...,
         [0.9294, 0.8588, 0.8431,  ..., 0.9804, 0.9725, 0.9686],
         [0.9412, 0.9373, 0.9412,  ..., 0.9804, 0.9725, 0.9725],
         [0.9373, 0.9294, 0.9373,  ..., 0.9804, 0.9765, 0.9765]],

        [[0.9608, 0.9608, 0.9608,  ..., 0.5686, 0.3137, 0.4980],
         [0.9608, 0.9647, 0.9608,  ..., 0.5255, 0.3490, 0.5216],
         [0.9608, 0.9647, 0.9608,  ..., 0.5137, 0.3961, 0.5333],
         ...,
         [0.9294, 0.8588, 0.8431,  ..., 0.9804, 0.9725, 0.9686],
         [0.9412, 0.9373, 0.9412,  ..., 0.9804, 0.9725, 0.9725],
         [0.9373, 0.9294, 0.9373,  ..., 0.9804, 0.9765, 0.9765]]],
       device='cuda:0'), tensor([[[0.9647, 0.9765, 0.9882,  ..., 0.8824, 0.9333, 0.9569],
         [0.9725, 0.9804, 0.9882,  ..., 0.8275, 0.8196, 0.8314],
         [0.9843, 0.9882, 0.9922,  ..., 0.7490, 0.6902, 0.6941],
         ...,
         [0.9922, 0.9882, 0.9882,  ..., 1.0000, 1.0000, 0.9922],
         [0.9961, 0.9804, 0.9725,  ..., 0.9961, 0.9961, 0.9961],
         [0.9961, 0.9765, 0.9608,  ..., 0.9922, 0.9961, 1.0000]],

        [[0.9765, 0.9882, 0.9961,  ..., 0.2627, 0.2275, 0.1765],
         [0.9804, 0.9882, 0.9961,  ..., 0.2667, 0.2235, 0.2000],
         [0.9882, 0.9922, 0.9961,  ..., 0.2745, 0.2431, 0.2667],
         ...,
         [0.9843, 0.9843, 0.9843,  ..., 0.9922, 0.9961, 0.9882],
         [0.9882, 0.9765, 0.9686,  ..., 0.9882, 0.9922, 0.9922],
         [0.9882, 0.9686, 0.9569,  ..., 0.9843, 0.9922, 0.9961]],

        [[0.9922, 1.0000, 1.0000,  ..., 0.3333, 0.3020, 0.2667],
         [0.9961, 1.0000, 1.0000,  ..., 0.3412, 0.3020, 0.2824],
         [1.0000, 1.0000, 1.0000,  ..., 0.3608, 0.3216, 0.3412],
         ...,
         [0.9843, 0.9765, 0.9765,  ..., 1.0000, 1.0000, 0.9961],
         [0.9882, 0.9725, 0.9647,  ..., 0.9961, 1.0000, 1.0000],
         [0.9922, 0.9725, 0.9569,  ..., 0.9961, 1.0000, 1.0000]]],
       device='cuda:0'), tensor([[[1.0000, 0.9961, 0.9922,  ..., 1.0000, 1.0000, 1.0000],
         [0.9961, 0.9922, 0.9843,  ..., 1.0000, 1.0000, 1.0000],
         [0.9961, 0.9882, 0.9765,  ..., 1.0000, 1.0000, 1.0000],
         ...,
         [0.2196, 0.1961, 0.2275,  ..., 0.3216, 0.3647, 0.2902],
         [0.2706, 0.2510, 0.2196,  ..., 0.2980, 0.3412, 0.2941],
         [0.2471, 0.2275, 0.2471,  ..., 0.3176, 0.3098, 0.3333]],

        [[1.0000, 0.9961, 0.9961,  ..., 1.0000, 1.0000, 1.0000],
         [0.9961, 0.9922, 0.9922,  ..., 1.0000, 1.0000, 1.0000],
         [1.0000, 0.9922, 0.9843,  ..., 1.0000, 1.0000, 1.0000],
         ...,
         [0.2039, 0.1765, 0.2118,  ..., 0.2941, 0.3373, 0.2627],
         [0.2549, 0.2314, 0.2000,  ..., 0.2706, 0.3137, 0.2706],
         [0.2196, 0.2078, 0.2275,  ..., 0.3020, 0.2980, 0.3294]],

        [[0.9922, 0.9882, 0.9961,  ..., 1.0000, 1.0000, 1.0000],
         [0.9882, 0.9882, 0.9922,  ..., 1.0000, 1.0000, 1.0000],
         [0.9961, 0.9922, 0.9843,  ..., 1.0000, 1.0000, 1.0000],
         ...,
         [0.1686, 0.1529, 0.1882,  ..., 0.2706, 0.3137, 0.2392],
         [0.2235, 0.2078, 0.1804,  ..., 0.2471, 0.2902, 0.2471],
         [0.1922, 0.1843, 0.2078,  ..., 0.2706, 0.2667, 0.3098]]],
       device='cuda:0'), tensor([[[0.0275, 0.0275, 0.0667,  ..., 0.0588, 0.1059, 0.0941],
         [0.0392, 0.0549, 0.0784,  ..., 0.0980, 0.1098, 0.0941],
         [0.0471, 0.0824, 0.0902,  ..., 0.1412, 0.1098, 0.0902],
         ...,
         [0.4941, 0.4157, 0.3686,  ..., 0.6745, 0.6824, 0.6706],
         [0.5137, 0.4275, 0.3804,  ..., 0.6588, 0.6745, 0.6706],
         [0.5255, 0.4314, 0.4000,  ..., 0.6471, 0.6706, 0.6706]],

        [[0.0392, 0.0392, 0.0784,  ..., 0.1922, 0.2353, 0.1922],
         [0.0510, 0.0667, 0.0902,  ..., 0.2235, 0.2314, 0.1882],
         [0.0588, 0.0941, 0.0980,  ..., 0.2549, 0.2196, 0.1765],
         ...,
         [0.3569, 0.2824, 0.2392,  ..., 0.7176, 0.7255, 0.7137],
         [0.3686, 0.2824, 0.2431,  ..., 0.7020, 0.7176, 0.7137],
         [0.3725, 0.2824, 0.2549,  ..., 0.6902, 0.7137, 0.7137]],

        [[0.0078, 0.0157, 0.0392,  ..., 0.0392, 0.0824, 0.0235],
         [0.0157, 0.0353, 0.0471,  ..., 0.0745, 0.0824, 0.0275],
         [0.0235, 0.0549, 0.0549,  ..., 0.1137, 0.0824, 0.0353],
         ...,
         [0.0745, 0.0314, 0.0392,  ..., 0.7961, 0.8039, 0.7922],
         [0.0510, 0.0118, 0.0235,  ..., 0.7804, 0.7961, 0.7922],
         [0.0314, 0.0000, 0.0235,  ..., 0.7647, 0.7922, 0.7922]]],
       device='cuda:0'))
----train_loader--->>-- inputs[1]...
 ({'boxes': tensor([[ 13.,  28., 216., 218.]]), 'labels': tensor([2])}, {'boxes': tensor([[ 13.,  11., 220., 210.]]), 'labels': tensor([2])}, {'boxes': tensor([[  7.,  42.,  42.,  71.],
        [ 21.,  32., 201., 209.],
        [192.,  55., 223.,  87.]]), 'labels': tensor([2, 2, 2])}, {'boxes': tensor([[  0.,  42., 156., 223.]]), 'labels': tensor([2])})
-----------type(optimizer----bbb---- <class 'torch.optim.sgd.SGD'>
